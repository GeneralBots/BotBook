import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/**
 * Defines values for AcceptOwnership. \
 * {@link KnownAcceptOwnership} can be used interchangeably with AcceptOwnership,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Completed** \
 * **Expired**
 */
export declare type AcceptOwnership = string;

/** The parameters required to accept subscription ownership. */
export declare interface AcceptOwnershipRequest {
    /** Accept subscription ownership request properties. */
    properties?: AcceptOwnershipRequestProperties;
}

/** Accept subscription ownership request properties. */
export declare interface AcceptOwnershipRequestProperties {
    /** The friendly name of the subscription. */
    displayName: string;
    /** Management group Id for the subscription. */
    managementGroupId?: string;
    /** Tags for the subscription */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Subscription Accept Ownership Response */
export declare interface AcceptOwnershipStatusResponse {
    /**
     * Newly created subscription Id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subscriptionId?: string;
    /**
     * The accept ownership state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly acceptOwnershipState?: AcceptOwnership;
    /**
     * The provisioning state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: Provisioning;
    /**
     * UPN of the billing owner
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly billingOwner?: string;
    /** Tenant Id of the subscription */
    subscriptionTenantId?: string;
    /** The display name of the subscription. */
    displayName?: string;
    /** Tags for the subscription */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Interface representing a Alias. */
export declare interface Alias {
    /**
     * Create Alias Subscription.
     * @param aliasName AliasName is the name for the subscription creation request. Note that this is not
     *                  the same as subscription name and this doesn’t have any other lifecycle need beyond the request for
     *                  subscription creation.
     * @param body The parameters required to create a new subscription.
     * @param options The options parameters.
     */
    beginCreate(aliasName: string, body: PutAliasRequest, options?: AliasCreateOptionalParams): Promise<PollerLike<PollOperationState<AliasCreateResponse>, AliasCreateResponse>>;
    /**
     * Create Alias Subscription.
     * @param aliasName AliasName is the name for the subscription creation request. Note that this is not
     *                  the same as subscription name and this doesn’t have any other lifecycle need beyond the request for
     *                  subscription creation.
     * @param body The parameters required to create a new subscription.
     * @param options The options parameters.
     */
    beginCreateAndWait(aliasName: string, body: PutAliasRequest, options?: AliasCreateOptionalParams): Promise<AliasCreateResponse>;
    /**
     * Get Alias Subscription.
     * @param aliasName AliasName is the name for the subscription creation request. Note that this is not
     *                  the same as subscription name and this doesn’t have any other lifecycle need beyond the request for
     *                  subscription creation.
     * @param options The options parameters.
     */
    get(aliasName: string, options?: AliasGetOptionalParams): Promise<AliasGetResponse>;
    /**
     * Delete Alias.
     * @param aliasName AliasName is the name for the subscription creation request. Note that this is not
     *                  the same as subscription name and this doesn’t have any other lifecycle need beyond the request for
     *                  subscription creation.
     * @param options The options parameters.
     */
    delete(aliasName: string, options?: AliasDeleteOptionalParams): Promise<void>;
    /**
     * List Alias Subscription.
     * @param options The options parameters.
     */
    list(options?: AliasListOptionalParams): Promise<AliasListResponse>;
}

/** Optional parameters. */
export declare interface AliasCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type AliasCreateResponse = SubscriptionAliasResponse;

/** Optional parameters. */
export declare interface AliasDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface AliasGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AliasGetResponse = SubscriptionAliasResponse;

/** Optional parameters. */
export declare interface AliasListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type AliasListResponse = SubscriptionAliasListResult;

/** Interface representing a BillingAccount. */
export declare interface BillingAccount {
    /**
     * Get Billing Account Policy.
     * @param billingAccountId Billing Account Id.
     * @param options The options parameters.
     */
    getPolicy(billingAccountId: string, options?: BillingAccountGetPolicyOptionalParams): Promise<BillingAccountGetPolicyResponse>;
}

/** Optional parameters. */
export declare interface BillingAccountGetPolicyOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getPolicy operation. */
export declare type BillingAccountGetPolicyResponse = BillingAccountPoliciesResponse;

/** Billing account policies information. */
export declare interface BillingAccountPoliciesResponse {
    /**
     * Fully qualified ID for the policy.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Policy name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Billing account policies response properties. */
    properties?: BillingAccountPoliciesResponseProperties;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** Put billing account policies response properties. */
export declare interface BillingAccountPoliciesResponseProperties {
    /** Service tenant for the billing account. */
    serviceTenants?: ServiceTenantResponse[];
    /** Determine if the transfers are allowed for the billing account */
    allowTransfers?: boolean;
}

/** The ID of the canceled subscription */
export declare interface CanceledSubscriptionId {
    /**
     * The ID of the canceled subscription
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subscriptionId?: string;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** The ID of the subscriptions that is being enabled */
export declare interface EnabledSubscriptionId {
    /**
     * The ID of the subscriptions that is being enabled
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subscriptionId?: string;
}

/** Describes the format of Error response. */
export declare interface ErrorResponse {
    /** Error code */
    code?: string;
    /** Error message indicating why the operation failed. */
    message?: string;
}

/** Error response indicates that the service is not able to process the incoming request. The reason is provided in the error message. */
export declare interface ErrorResponseBody {
    /** The details of the error. */
    error?: ErrorResponse;
    /** Error code */
    code?: string;
    /** Error message indicating why the operation failed. */
    message?: string;
}

/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Tenant policy information list. */
export declare interface GetTenantPolicyListResponse {
    /**
     * The list of tenant policies.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: GetTenantPolicyResponse[];
    /**
     * The link (url) to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Tenant policy Information. */
export declare interface GetTenantPolicyResponse {
    /**
     * Policy Id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Policy name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Tenant policy properties. */
    properties?: TenantPolicy;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** Known values of {@link AcceptOwnership} that the service accepts. */
export declare enum KnownAcceptOwnership {
    /** Pending */
    Pending = "Pending",
    /** Completed */
    Completed = "Completed",
    /** Expired */
    Expired = "Expired"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link Provisioning} that the service accepts. */
export declare enum KnownProvisioning {
    /** Pending */
    Pending = "Pending",
    /** Accepted */
    Accepted = "Accepted",
    /** Succeeded */
    Succeeded = "Succeeded"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Accepted */
    Accepted = "Accepted",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link Workload} that the service accepts. */
export declare enum KnownWorkload {
    /** Production */
    Production = "Production",
    /** DevTest */
    DevTest = "DevTest"
}

/** Location information. */
declare interface Location_2 {
    /**
     * The fully qualified ID of the location. For example, /subscriptions/00000000-0000-0000-0000-000000000000/locations/westus.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The subscription ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subscriptionId?: string;
    /**
     * The location name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The display name of the location.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * The latitude of the location.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly latitude?: string;
    /**
     * The longitude of the location.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly longitude?: string;
}
export { Location_2 as Location }

/** Location list operation response. */
export declare interface LocationListResult {
    /** An array of locations. */
    value?: Location_2[];
}

/** REST API operation */
export declare interface Operation {
    /** Operation name: {provider}/{resource}/{operation} */
    name?: string;
    /** Indicates whether the operation is a data action */
    isDataAction?: boolean;
    /** The object that represents the operation. */
    display?: OperationDisplay;
}

/** The object that represents the operation. */
export declare interface OperationDisplay {
    /** Service provider: Microsoft.Subscription */
    provider?: string;
    /** Resource on which the operation is performed: Profile, endpoint, etc. */
    resource?: string;
    /** Operation type: Read, write, delete, etc. */
    operation?: string;
    /** Localized friendly description for the operation */
    description?: string;
}

/** Result of the request to list operations. It contains a list of operations and a URL link to get the next set of results. */
export declare interface OperationListResult {
    /** List of operations. */
    value?: Operation[];
    /** URL to get the next set of operation list results if there are any. */
    nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available Microsoft.Subscription API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/**
 * Defines values for Provisioning. \
 * {@link KnownProvisioning} can be used interchangeably with Provisioning,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Accepted** \
 * **Succeeded**
 */
export declare type Provisioning = string;

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Accepted** \
 * **Succeeded** \
 * **Failed**
 */
export declare type ProvisioningState = string;

/** The parameters required to create a new subscription. */
export declare interface PutAliasRequest {
    /** Put alias request properties. */
    properties?: PutAliasRequestProperties;
}

/** Put subscription additional properties. */
export declare interface PutAliasRequestAdditionalProperties {
    /** Management group Id for the subscription. */
    managementGroupId?: string;
    /** Tenant Id of the subscription */
    subscriptionTenantId?: string;
    /** Owner Id of the subscription */
    subscriptionOwnerId?: string;
    /** Tags for the subscription */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Put subscription properties. */
export declare interface PutAliasRequestProperties {
    /** The friendly name of the subscription. */
    displayName?: string;
    /** The workload type of the subscription. It can be either Production or DevTest. */
    workload?: Workload;
    /**
     * Billing scope of the subscription.
     * For CustomerLed and FieldLed - /billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}
     * For PartnerLed - /billingAccounts/{billingAccountName}/customers/{customerName}
     * For Legacy EA - /billingAccounts/{billingAccountName}/enrollmentAccounts/{enrollmentAccountName}
     */
    billingScope?: string;
    /** This parameter can be used to create alias for existing subscription Id */
    subscriptionId?: string;
    /** Reseller Id */
    resellerId?: string;
    /** Put alias request additional properties. */
    additionalProperties?: PutAliasRequestAdditionalProperties;
}

/** Put tenant policy request properties. */
export declare interface PutTenantPolicyRequestProperties {
    /** Blocks the leaving of subscriptions from user's tenant. */
    blockSubscriptionsLeavingTenant?: boolean;
    /** Blocks the entering of subscriptions into user's tenant. */
    blockSubscriptionsIntoTenant?: boolean;
    /** List of user objectIds that are exempted from the set subscription tenant policies for the user's tenant. */
    exemptedPrincipals?: string[];
}

/** The ID of the subscriptions that is being renamed */
export declare interface RenamedSubscriptionId {
    /**
     * The ID of the subscriptions that is being renamed
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subscriptionId?: string;
}

/** Billing account service tenant. */
export declare interface ServiceTenantResponse {
    /** Service tenant id. */
    tenantId?: string;
    /** Service tenant name. */
    tenantName?: string;
}

/** Defines values for SpendingLimit. */
export declare type SpendingLimit = "On" | "Off" | "CurrentPeriodOff";

/** Subscription information. */
export declare interface Subscription {
    /**
     * The fully qualified ID for the subscription. For example, /subscriptions/00000000-0000-0000-0000-000000000000.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The subscription ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subscriptionId?: string;
    /**
     * The subscription display name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * The subscription state. Possible values are Enabled, Warned, PastDue, Disabled, and Deleted.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: SubscriptionState;
    /**
     * The tenant ID. For example, 00000000-0000-0000-0000-000000000000.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** Tags for the subscription */
    tags?: {
        [propertyName: string]: string;
    };
    /** The subscription policies. */
    subscriptionPolicies?: SubscriptionPolicies;
    /** The authorization source of the request. Valid values are one or more combinations of Legacy, RoleBased, Bypassed, Direct and Management. For example, 'Legacy, RoleBased'. */
    authorizationSource?: string;
}

/** Defines headers for Subscription_acceptOwnership operation. */
export declare interface SubscriptionAcceptOwnershipHeaders {
    /** GET this URL to retrieve the status of the asynchronous operation. */
    location?: string;
    /** The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. */
    retryAfter?: number;
}

/** Optional parameters. */
export declare interface SubscriptionAcceptOwnershipOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the acceptOwnership operation. */
export declare type SubscriptionAcceptOwnershipResponse = SubscriptionAcceptOwnershipHeaders;

/** Optional parameters. */
export declare interface SubscriptionAcceptOwnershipStatusOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the acceptOwnershipStatus operation. */
export declare type SubscriptionAcceptOwnershipStatusResponse = AcceptOwnershipStatusResponse;

/** The list of aliases. */
export declare interface SubscriptionAliasListResult {
    /**
     * The list of alias.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: SubscriptionAliasResponse[];
    /**
     * The link (url) to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Subscription Information with the alias. */
export declare interface SubscriptionAliasResponse {
    /**
     * Fully qualified ID for the alias resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Alias ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type, Microsoft.Subscription/aliases.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Subscription Alias response properties. */
    properties?: SubscriptionAliasResponseProperties;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** Put subscription creation result properties. */
export declare interface SubscriptionAliasResponseProperties {
    /**
     * Newly created subscription Id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subscriptionId?: string;
    /** The display name of the subscription. */
    displayName?: string;
    /** The provisioning state of the resource. */
    provisioningState?: ProvisioningState;
    /**
     * Url to accept ownership of the subscription.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly acceptOwnershipUrl?: string;
    /**
     * The accept ownership state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly acceptOwnershipState?: AcceptOwnership;
    /**
     * Billing scope of the subscription.
     * For CustomerLed and FieldLed - /billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}
     * For PartnerLed - /billingAccounts/{billingAccountName}/customers/{customerName}
     * For Legacy EA - /billingAccounts/{billingAccountName}/enrollmentAccounts/{enrollmentAccountName}
     */
    billingScope?: string;
    /** The workload type of the subscription. It can be either Production or DevTest. */
    workload?: Workload;
    /** Reseller Id */
    resellerId?: string;
    /** Owner Id of the subscription */
    subscriptionOwnerId?: string;
    /** The Management Group Id. */
    managementGroupId?: string;
    /** Created Time */
    createdTime?: string;
    /** Tags for the subscription */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Optional parameters. */
export declare interface SubscriptionCancelOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the cancel operation. */
export declare type SubscriptionCancelResponse = CanceledSubscriptionId;

export declare class SubscriptionClient extends coreClient.ServiceClient {
    $host: string;
    /**
     * Initializes a new instance of the SubscriptionClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, options?: SubscriptionClientOptionalParams);
    subscriptions: Subscriptions;
    tenants: Tenants;
    subscriptionOperations: SubscriptionOperations;
    operations: Operations;
    alias: Alias;
    subscriptionPolicy: SubscriptionPolicy;
    billingAccount: BillingAccount;
}

/** Optional parameters. */
export declare interface SubscriptionClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Optional parameters. */
export declare interface SubscriptionEnableOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the enable operation. */
export declare type SubscriptionEnableResponse = EnabledSubscriptionId;

/** Subscription list operation response. */
export declare interface SubscriptionListResult {
    /** An array of subscriptions. */
    value?: Subscription[];
    /** The URL to get the next set of results. */
    nextLink?: string;
}

/** The new name of the subscription. */
export declare interface SubscriptionName {
    /** New subscription name */
    subscriptionName?: string;
}

/** Interface representing a SubscriptionOperations. */
export declare interface SubscriptionOperations {
    /**
     * The operation to cancel a subscription
     * @param subscriptionId Subscription Id.
     * @param options The options parameters.
     */
    cancel(subscriptionId: string, options?: SubscriptionCancelOptionalParams): Promise<SubscriptionCancelResponse>;
    /**
     * The operation to rename a subscription
     * @param subscriptionId Subscription Id.
     * @param body Subscription Name
     * @param options The options parameters.
     */
    rename(subscriptionId: string, body: SubscriptionName, options?: SubscriptionRenameOptionalParams): Promise<SubscriptionRenameResponse>;
    /**
     * The operation to enable a subscription
     * @param subscriptionId Subscription Id.
     * @param options The options parameters.
     */
    enable(subscriptionId: string, options?: SubscriptionEnableOptionalParams): Promise<SubscriptionEnableResponse>;
    /**
     * Accept subscription ownership.
     * @param subscriptionId Subscription Id.
     * @param body The parameters required to accept subscription ownership.
     * @param options The options parameters.
     */
    beginAcceptOwnership(subscriptionId: string, body: AcceptOwnershipRequest, options?: SubscriptionAcceptOwnershipOptionalParams): Promise<PollerLike<PollOperationState<SubscriptionAcceptOwnershipResponse>, SubscriptionAcceptOwnershipResponse>>;
    /**
     * Accept subscription ownership.
     * @param subscriptionId Subscription Id.
     * @param body The parameters required to accept subscription ownership.
     * @param options The options parameters.
     */
    beginAcceptOwnershipAndWait(subscriptionId: string, body: AcceptOwnershipRequest, options?: SubscriptionAcceptOwnershipOptionalParams): Promise<SubscriptionAcceptOwnershipResponse>;
    /**
     * Accept subscription ownership status.
     * @param subscriptionId Subscription Id.
     * @param options The options parameters.
     */
    acceptOwnershipStatus(subscriptionId: string, options?: SubscriptionAcceptOwnershipStatusOptionalParams): Promise<SubscriptionAcceptOwnershipStatusResponse>;
}

/** Subscription policies. */
export declare interface SubscriptionPolicies {
    /**
     * The subscription location placement ID. The ID indicates which regions are visible for a subscription. For example, a subscription with a location placement Id of Public_2014-09-01 has access to Azure public regions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly locationPlacementId?: string;
    /**
     * The subscription quota ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly quotaId?: string;
    /**
     * The subscription spending limit.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly spendingLimit?: SpendingLimit;
}

/** Interface representing a SubscriptionPolicy. */
export declare interface SubscriptionPolicy {
    /**
     * Get the subscription tenant policy for the user's tenant.
     * @param options The options parameters.
     */
    listPolicyForTenant(options?: SubscriptionPolicyListPolicyForTenantOptionalParams): PagedAsyncIterableIterator<GetTenantPolicyResponse>;
    /**
     * Create or Update Subscription tenant policy for user's tenant.
     * @param body Put tenant policy request properties.
     * @param options The options parameters.
     */
    addUpdatePolicyForTenant(body: PutTenantPolicyRequestProperties, options?: SubscriptionPolicyAddUpdatePolicyForTenantOptionalParams): Promise<SubscriptionPolicyAddUpdatePolicyForTenantResponse>;
    /**
     * Get the subscription tenant policy for the user's tenant.
     * @param options The options parameters.
     */
    getPolicyForTenant(options?: SubscriptionPolicyGetPolicyForTenantOptionalParams): Promise<SubscriptionPolicyGetPolicyForTenantResponse>;
}

/** Optional parameters. */
export declare interface SubscriptionPolicyAddUpdatePolicyForTenantOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the addUpdatePolicyForTenant operation. */
export declare type SubscriptionPolicyAddUpdatePolicyForTenantResponse = GetTenantPolicyResponse;

/** Optional parameters. */
export declare interface SubscriptionPolicyGetPolicyForTenantOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getPolicyForTenant operation. */
export declare type SubscriptionPolicyGetPolicyForTenantResponse = GetTenantPolicyResponse;

/** Optional parameters. */
export declare interface SubscriptionPolicyListPolicyForTenantNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listPolicyForTenantNext operation. */
export declare type SubscriptionPolicyListPolicyForTenantNextResponse = GetTenantPolicyListResponse;

/** Optional parameters. */
export declare interface SubscriptionPolicyListPolicyForTenantOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listPolicyForTenant operation. */
export declare type SubscriptionPolicyListPolicyForTenantResponse = GetTenantPolicyListResponse;

/** Optional parameters. */
export declare interface SubscriptionRenameOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the rename operation. */
export declare type SubscriptionRenameResponse = RenamedSubscriptionId;

/** Interface representing a Subscriptions. */
export declare interface Subscriptions {
    /**
     * This operation provides all the locations that are available for resource providers; however, each
     * resource provider may support a subset of this list.
     * @param subscriptionId The ID of the target subscription.
     * @param options The options parameters.
     */
    listLocations(subscriptionId: string, options?: SubscriptionsListLocationsOptionalParams): PagedAsyncIterableIterator<Location_2>;
    /**
     * Gets all subscriptions for a tenant.
     * @param options The options parameters.
     */
    list(options?: SubscriptionsListOptionalParams): PagedAsyncIterableIterator<Subscription>;
    /**
     * Gets details about a specified subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The options parameters.
     */
    get(subscriptionId: string, options?: SubscriptionsGetOptionalParams): Promise<SubscriptionsGetResponse>;
}

/** Optional parameters. */
export declare interface SubscriptionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SubscriptionsGetResponse = Subscription;

/** Optional parameters. */
export declare interface SubscriptionsListLocationsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listLocations operation. */
export declare type SubscriptionsListLocationsResponse = LocationListResult;

/** Optional parameters. */
export declare interface SubscriptionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type SubscriptionsListNextResponse = SubscriptionListResult;

/** Optional parameters. */
export declare interface SubscriptionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type SubscriptionsListResponse = SubscriptionListResult;

/** Defines values for SubscriptionState. */
export declare type SubscriptionState = "Enabled" | "Warned" | "PastDue" | "Disabled" | "Deleted";

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** Tenant Id information. */
export declare interface TenantIdDescription {
    /**
     * The fully qualified ID of the tenant. For example, /tenants/00000000-0000-0000-0000-000000000000.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The tenant ID. For example, 00000000-0000-0000-0000-000000000000.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /**
     * The category of the tenant. Possible values are TenantCategoryHome,TenantCategoryProjectedBy,TenantCategoryManagedBy
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantCategory?: string;
    /**
     * The country/region name of the address for the tenant.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly country?: string;
    /**
     * The Country/region abbreviation for the tenant.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly countryCode?: string;
    /**
     * The display name of the tenant.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * The list of domains for the tenant.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly domains?: string;
    /**
     * The default domain for the tenant.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly defaultDomain?: string;
    /**
     * The tenant type. Only available for Home tenant category.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantType?: string;
}

/** Tenant Ids information. */
export declare interface TenantListResult {
    /** An array of tenants. */
    value?: TenantIdDescription[];
    /** The URL to use for getting the next set of results. */
    nextLink: string;
}

/** Tenant policy. */
export declare interface TenantPolicy {
    /**
     * Policy Id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policyId?: string;
    /** Blocks the leaving of subscriptions from user's tenant. */
    blockSubscriptionsLeavingTenant?: boolean;
    /** Blocks the entering of subscriptions into user's tenant. */
    blockSubscriptionsIntoTenant?: boolean;
    /** List of user objectIds that are exempted from the set subscription tenant policies for the user's tenant. */
    exemptedPrincipals?: string[];
}

/** Interface representing a Tenants. */
export declare interface Tenants {
    /**
     * Gets the tenants for your account.
     * @param options The options parameters.
     */
    list(options?: TenantsListOptionalParams): PagedAsyncIterableIterator<TenantIdDescription>;
}

/** Optional parameters. */
export declare interface TenantsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type TenantsListNextResponse = TenantListResult;

/** Optional parameters. */
export declare interface TenantsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type TenantsListResponse = TenantListResult;

/**
 * Defines values for Workload. \
 * {@link KnownWorkload} can be used interchangeably with Workload,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Production** \
 * **DevTest**
 */
export declare type Workload = string;

export { }
