/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing TagsOperations operations. */
export class TagsOperationsImpl {
    /**
     * Initialize a new instance of the class TagsOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * This operation performs a union of predefined tags, resource tags, resource group tags and
     * subscription tags, and returns a summary of usage for each tag name and value under the given
     * subscription. In case of a large number of tags, this operation may return a previously cached
     * result.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * This operation allows deleting a value from the list of predefined values for an existing predefined
     * tag name. The value being deleted must not be in use as a tag value for the given tag name for any
     * resource.
     * @param tagName The name of the tag.
     * @param tagValue The value of the tag to delete.
     * @param options The options parameters.
     */
    deleteValue(tagName, tagValue, options) {
        return this.client.sendOperationRequest({ tagName, tagValue, options }, deleteValueOperationSpec);
    }
    /**
     * This operation allows adding a value to the list of predefined values for an existing predefined tag
     * name. A tag value can have a maximum of 256 characters.
     * @param tagName The name of the tag.
     * @param tagValue The value of the tag to create.
     * @param options The options parameters.
     */
    createOrUpdateValue(tagName, tagValue, options) {
        return this.client.sendOperationRequest({ tagName, tagValue, options }, createOrUpdateValueOperationSpec);
    }
    /**
     * This operation allows adding a name to the list of predefined tag names for the given subscription.
     * A tag name can have a maximum of 512 characters and is case-insensitive. Tag names cannot have the
     * following prefixes which are reserved for Azure use: 'microsoft', 'azure', 'windows'.
     * @param tagName The name of the tag to create.
     * @param options The options parameters.
     */
    createOrUpdate(tagName, options) {
        return this.client.sendOperationRequest({ tagName, options }, createOrUpdateOperationSpec);
    }
    /**
     * This operation allows deleting a name from the list of predefined tag names for the given
     * subscription. The name being deleted must not be in use as a tag name for any resource. All
     * predefined values for the given name must have already been deleted.
     * @param tagName The name of the tag.
     * @param options The options parameters.
     */
    delete(tagName, options) {
        return this.client.sendOperationRequest({ tagName, options }, deleteOperationSpec);
    }
    /**
     * This operation performs a union of predefined tags, resource tags, resource group tags and
     * subscription tags, and returns a summary of usage for each tag name and value under the given
     * subscription. In case of a large number of tags, this operation may return a previously cached
     * result.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * This operation allows adding or replacing the entire set of tags on the specified resource or
     * subscription. The specified entity can have a maximum of 50 tags.
     * @param scope The resource scope.
     * @param parameters Wrapper resource for tags API requests and responses.
     * @param options The options parameters.
     */
    createOrUpdateAtScope(scope, parameters, options) {
        return this.client.sendOperationRequest({ scope, parameters, options }, createOrUpdateAtScopeOperationSpec);
    }
    /**
     * This operation allows replacing, merging or selectively deleting tags on the specified resource or
     * subscription. The specified entity can have a maximum of 50 tags at the end of the operation. The
     * 'replace' option replaces the entire set of existing tags with a new set. The 'merge' option allows
     * adding tags with new names and updating the values of tags with existing names. The 'delete' option
     * allows selectively deleting tags based on given names or name/value pairs.
     * @param scope The resource scope.
     * @param parameters Wrapper resource for tags patch API request only.
     * @param options The options parameters.
     */
    updateAtScope(scope, parameters, options) {
        return this.client.sendOperationRequest({ scope, parameters, options }, updateAtScopeOperationSpec);
    }
    /**
     * Gets the entire set of tags on a resource or subscription.
     * @param scope The resource scope.
     * @param options The options parameters.
     */
    getAtScope(scope, options) {
        return this.client.sendOperationRequest({ scope, options }, getAtScopeOperationSpec);
    }
    /**
     * Deletes the entire set of tags on a resource or subscription.
     * @param scope The resource scope.
     * @param options The options parameters.
     */
    deleteAtScope(scope, options) {
        return this.client.sendOperationRequest({ scope, options }, deleteAtScopeOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const deleteValueOperationSpec = {
    path: "/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.tagName,
        Parameters.tagValue
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateValueOperationSpec = {
    path: "/subscriptions/{subscriptionId}/tagNames/{tagName}/tagValues/{tagValue}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.TagValue
        },
        201: {
            bodyMapper: Mappers.TagValue
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.tagName,
        Parameters.tagValue
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/tagNames/{tagName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.TagDetails
        },
        201: {
            bodyMapper: Mappers.TagDetails
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.tagName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/tagNames/{tagName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.tagName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/tagNames",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.TagsListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateAtScopeOperationSpec = {
    path: "/{scope}/providers/Microsoft.Resources/tags/default",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.TagsResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.parameters9,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.scope],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const updateAtScopeOperationSpec = {
    path: "/{scope}/providers/Microsoft.Resources/tags/default",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.TagsResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.parameters10,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.scope],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getAtScopeOperationSpec = {
    path: "/{scope}/providers/Microsoft.Resources/tags/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.TagsResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.scope],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteAtScopeOperationSpec = {
    path: "/{scope}/providers/Microsoft.Resources/tags/default",
    httpMethod: "DELETE",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.scope],
    headerParameters: [Parameters.accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.TagsListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=tagsOperations.js.map