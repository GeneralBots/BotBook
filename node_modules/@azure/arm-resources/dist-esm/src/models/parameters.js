/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { Deployment as DeploymentMapper, ScopedDeployment as ScopedDeploymentMapper, ScopedDeploymentWhatIf as ScopedDeploymentWhatIfMapper, DeploymentWhatIf as DeploymentWhatIfMapper, ProviderRegistrationRequest as ProviderRegistrationRequestMapper, ResourcesMoveInfo as ResourcesMoveInfoMapper, GenericResource as GenericResourceMapper, ResourceGroup as ResourceGroupMapper, ResourceGroupPatchable as ResourceGroupPatchableMapper, ExportTemplateRequest as ExportTemplateRequestMapper, TagsResource as TagsResourceMapper, TagsPatchResource as TagsPatchResourceMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-04-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const scope = {
    parameterPath: "scope",
    mapper: {
        serializedName: "scope",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const deploymentName = {
    parameterPath: "deploymentName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 64,
            MinLength: 1
        },
        serializedName: "deploymentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const parameters = {
    parameterPath: "parameters",
    mapper: DeploymentMapper
};
export const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
export const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: ScopedDeploymentMapper
};
export const parameters2 = {
    parameterPath: "parameters",
    mapper: ScopedDeploymentWhatIfMapper
};
export const groupId = {
    parameterPath: "groupId",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "groupId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: DeploymentWhatIfMapper
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const template = {
    parameterPath: "template",
    mapper: {
        serializedName: "template",
        required: true,
        type: {
            name: "Dictionary",
            value: { type: { name: "any" } }
        }
    }
};
export const resourceProviderNamespace = {
    parameterPath: "resourceProviderNamespace",
    mapper: {
        serializedName: "resourceProviderNamespace",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const properties = {
    parameterPath: ["options", "properties"],
    mapper: ProviderRegistrationRequestMapper
};
export const expand = {
    parameterPath: ["options", "expand"],
    mapper: {
        serializedName: "$expand",
        type: {
            name: "String"
        }
    }
};
export const parameters4 = {
    parameterPath: "parameters",
    mapper: ResourcesMoveInfoMapper
};
export const sourceResourceGroupName = {
    parameterPath: "sourceResourceGroupName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._\\(\\)]+$"),
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "sourceResourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parentResourcePath = {
    parameterPath: "parentResourcePath",
    mapper: {
        serializedName: "parentResourcePath",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const resourceType = {
    parameterPath: "resourceType",
    mapper: {
        serializedName: "resourceType",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const resourceName = {
    parameterPath: "resourceName",
    mapper: {
        serializedName: "resourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const apiVersion1 = {
    parameterPath: "apiVersion",
    mapper: {
        serializedName: "api-version",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters5 = {
    parameterPath: "parameters",
    mapper: GenericResourceMapper
};
export const resourceId = {
    parameterPath: "resourceId",
    mapper: {
        serializedName: "resourceId",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const parameters6 = {
    parameterPath: "parameters",
    mapper: ResourceGroupMapper
};
export const forceDeletionTypes = {
    parameterPath: ["options", "forceDeletionTypes"],
    mapper: {
        serializedName: "forceDeletionTypes",
        type: {
            name: "String"
        }
    }
};
export const parameters7 = {
    parameterPath: "parameters",
    mapper: ResourceGroupPatchableMapper
};
export const parameters8 = {
    parameterPath: "parameters",
    mapper: ExportTemplateRequestMapper
};
export const resourceGroupName1 = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const tagName = {
    parameterPath: "tagName",
    mapper: {
        serializedName: "tagName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const tagValue = {
    parameterPath: "tagValue",
    mapper: {
        serializedName: "tagValue",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters9 = {
    parameterPath: "parameters",
    mapper: TagsResourceMapper
};
export const parameters10 = {
    parameterPath: "parameters",
    mapper: TagsPatchResourceMapper
};
export const operationId = {
    parameterPath: "operationId",
    mapper: {
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map