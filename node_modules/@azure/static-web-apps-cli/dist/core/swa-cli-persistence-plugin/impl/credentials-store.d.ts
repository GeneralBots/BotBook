import { TokenCachePersistenceOptions } from "@azure/identity";
type KeychainModule = typeof import("keytar");
interface KeychainCredentialsAccount {
    account: string;
    password: string;
}
interface KeychainCredentialsStore {
    getPassword(service: string, account: string): Promise<string | null>;
    setPassword(service: string, account: string, credentials: string): Promise<void>;
    deletePassword(service: string, account: string): Promise<boolean>;
    findPassword(service: string): Promise<string | null>;
    findCredentials(service: string): Promise<Array<KeychainCredentialsAccount>>;
    clear(): Promise<void>;
}
export declare class NativeCredentialsStore implements KeychainCredentialsStore {
    private options;
    constructor(options: TokenCachePersistenceOptions);
    private static readonly KEYCHAIN_ENTRY_MAX_LENGTH;
    private static readonly KEYCHAIN_ENTRY_CHUNK_SIZE;
    private static readonly KEYCHAIN_SERVICE;
    private keychainCache;
    getPassword(service: string, account: string): Promise<string | null>;
    setPassword(service: string, account: string, credentials: string): Promise<void>;
    deletePassword(service: string, account: string): Promise<boolean>;
    findPassword(service: string): Promise<string | null>;
    findCredentials(service: string): Promise<Array<{
        account: string;
        password: string;
    }>>;
    clear(): Promise<void>;
    getSecretStoragePrefix(): Promise<string>;
    requireKeychain(): Promise<KeychainModule>;
    validateX11Environment(): Promise<void>;
}
export {};
//# sourceMappingURL=credentials-store.d.ts.map