/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { WebSiteManagementClient } from "@azure/arm-appservice";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Description for Applies the configuration settings from the target slot onto the current slot.
 *
 * @summary Description for Applies the configuration settings from the target slot onto the current slot.
 * x-ms-original-file: specification/web/resource-manager/Microsoft.Web/stable/2023-12-01/examples/ApplySlotConfig.json
 */
function applyWebAppSlotConfig() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["APPSERVICE_SUBSCRIPTION_ID"] ||
            "34adfa4f-cedf-4dc0-ba29-b6d1a69ab345";
        const resourceGroupName = process.env["APPSERVICE_RESOURCE_GROUP"] || "testrg123";
        const name = "sitef6141";
        const slotSwapEntity = {
            preserveVnet: true,
            targetSlot: "staging",
        };
        const credential = new DefaultAzureCredential();
        const client = new WebSiteManagementClient(credential, subscriptionId);
        const result = yield client.webApps.applySlotConfigToProduction(resourceGroupName, name, slotSwapEntity);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        applyWebAppSlotConfig();
    });
}
main().catch(console.error);
//# sourceMappingURL=webAppsApplySlotConfigToProductionSample.js.map