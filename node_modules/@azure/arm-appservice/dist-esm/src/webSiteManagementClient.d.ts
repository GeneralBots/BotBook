import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { AppServiceCertificateOrders, CertificateOrdersDiagnostics, CertificateRegistrationProvider, Domains, TopLevelDomains, DomainRegistrationProvider, AppServiceEnvironments, AppServicePlans, Certificates, ContainerApps, ContainerAppsRevisions, DeletedWebApps, Diagnostics, Global, KubeEnvironments, Provider, Recommendations, ResourceHealthMetadataOperations, GetUsagesInLocation, StaticSites, WebApps, Workflows, WorkflowRuns, WorkflowRunActions, WorkflowRunActionRepetitions, WorkflowRunActionRepetitionsRequestHistories, WorkflowRunActionScopeRepetitions, WorkflowTriggers, WorkflowTriggerHistories, WorkflowVersions } from "./operationsInterfaces";
import { WebSiteManagementClientOptionalParams, SourceControl, ListSourceControlsOptionalParams, BillingMeter, ListBillingMetersOptionalParams, CustomHostnameSites, ListCustomHostNameSitesOptionalParams, AseRegion, ListAseRegionsOptionalParams, GeoRegion, ListGeoRegionsOptionalParams, Identifier, NameIdentifier, ListSiteIdentifiersAssignedToHostNameOptionalParams, PremierAddOnOffer, ListPremierAddOnOffersOptionalParams, GetPublishingUserOptionalParams, GetPublishingUserResponse, User, UpdatePublishingUserOptionalParams, UpdatePublishingUserResponse, GetSourceControlOptionalParams, GetSourceControlResponse, UpdateSourceControlOptionalParams, UpdateSourceControlResponse, CheckNameResourceTypes, CheckNameAvailabilityOptionalParams, CheckNameAvailabilityResponse, GetSubscriptionDeploymentLocationsOptionalParams, GetSubscriptionDeploymentLocationsResponse, ListSkusOptionalParams, ListSkusResponse, VnetParameters, VerifyHostingEnvironmentVnetOptionalParams, VerifyHostingEnvironmentVnetResponse, CsmMoveResourceEnvelope, MoveOptionalParams, ValidateRequest, ValidateOptionalParams, ValidateOperationResponse, ValidateMoveOptionalParams } from "./models";
export declare class WebSiteManagementClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId?: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the WebSiteManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g.
     *                       00000000-0000-0000-0000-000000000000).
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: WebSiteManagementClientOptionalParams);
    constructor(credentials: coreAuth.TokenCredential, options?: WebSiteManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Description for Gets the source controls available for Azure websites.
     * @param options The options parameters.
     */
    listSourceControls(options?: ListSourceControlsOptionalParams): PagedAsyncIterableIterator<SourceControl>;
    private listSourceControlsPagingPage;
    private listSourceControlsPagingAll;
    /**
     * Description for Gets a list of meters for a given location.
     * @param options The options parameters.
     */
    listBillingMeters(options?: ListBillingMetersOptionalParams): PagedAsyncIterableIterator<BillingMeter>;
    private listBillingMetersPagingPage;
    private listBillingMetersPagingAll;
    /**
     * Get custom hostnames under this subscription
     * @param options The options parameters.
     */
    listCustomHostNameSites(options?: ListCustomHostNameSitesOptionalParams): PagedAsyncIterableIterator<CustomHostnameSites>;
    private listCustomHostNameSitesPagingPage;
    private listCustomHostNameSitesPagingAll;
    /**
     * Description for get a list of available ASE regions and its supported Skus.
     * @param options The options parameters.
     */
    listAseRegions(options?: ListAseRegionsOptionalParams): PagedAsyncIterableIterator<AseRegion>;
    private listAseRegionsPagingPage;
    private listAseRegionsPagingAll;
    /**
     * Description for Get a list of available geographical regions.
     * @param options The options parameters.
     */
    listGeoRegions(options?: ListGeoRegionsOptionalParams): PagedAsyncIterableIterator<GeoRegion>;
    private listGeoRegionsPagingPage;
    private listGeoRegionsPagingAll;
    /**
     * Description for List all apps that are assigned to a hostname.
     * @param nameIdentifier Hostname information.
     * @param options The options parameters.
     */
    listSiteIdentifiersAssignedToHostName(nameIdentifier: NameIdentifier, options?: ListSiteIdentifiersAssignedToHostNameOptionalParams): PagedAsyncIterableIterator<Identifier>;
    private listSiteIdentifiersAssignedToHostNamePagingPage;
    private listSiteIdentifiersAssignedToHostNamePagingAll;
    /**
     * Description for List all premier add-on offers.
     * @param options The options parameters.
     */
    listPremierAddOnOffers(options?: ListPremierAddOnOffersOptionalParams): PagedAsyncIterableIterator<PremierAddOnOffer>;
    private listPremierAddOnOffersPagingPage;
    private listPremierAddOnOffersPagingAll;
    /**
     * Description for Gets publishing user
     * @param options The options parameters.
     */
    getPublishingUser(options?: GetPublishingUserOptionalParams): Promise<GetPublishingUserResponse>;
    /**
     * Description for Updates publishing user
     * @param userDetails Details of publishing user
     * @param options The options parameters.
     */
    updatePublishingUser(userDetails: User, options?: UpdatePublishingUserOptionalParams): Promise<UpdatePublishingUserResponse>;
    /**
     * Description for Gets the source controls available for Azure websites.
     * @param options The options parameters.
     */
    private _listSourceControls;
    /**
     * Description for Gets source control token
     * @param sourceControlType Type of source control
     * @param options The options parameters.
     */
    getSourceControl(sourceControlType: string, options?: GetSourceControlOptionalParams): Promise<GetSourceControlResponse>;
    /**
     * Description for Updates source control token
     * @param sourceControlType Type of source control
     * @param requestMessage Source control token information
     * @param options The options parameters.
     */
    updateSourceControl(sourceControlType: string, requestMessage: SourceControl, options?: UpdateSourceControlOptionalParams): Promise<UpdateSourceControlResponse>;
    /**
     * Description for Gets a list of meters for a given location.
     * @param options The options parameters.
     */
    private _listBillingMeters;
    /**
     * Description for Check if a resource name is available.
     * @param name Resource name to verify.
     * @param typeParam Resource type used for verification.
     * @param options The options parameters.
     */
    checkNameAvailability(name: string, typeParam: CheckNameResourceTypes, options?: CheckNameAvailabilityOptionalParams): Promise<CheckNameAvailabilityResponse>;
    /**
     * Get custom hostnames under this subscription
     * @param options The options parameters.
     */
    private _listCustomHostNameSites;
    /**
     * Description for Gets list of available geo regions plus ministamps
     * @param options The options parameters.
     */
    getSubscriptionDeploymentLocations(options?: GetSubscriptionDeploymentLocationsOptionalParams): Promise<GetSubscriptionDeploymentLocationsResponse>;
    /**
     * Description for get a list of available ASE regions and its supported Skus.
     * @param options The options parameters.
     */
    private _listAseRegions;
    /**
     * Description for Get a list of available geographical regions.
     * @param options The options parameters.
     */
    private _listGeoRegions;
    /**
     * Description for List all apps that are assigned to a hostname.
     * @param nameIdentifier Hostname information.
     * @param options The options parameters.
     */
    private _listSiteIdentifiersAssignedToHostName;
    /**
     * Description for List all premier add-on offers.
     * @param options The options parameters.
     */
    private _listPremierAddOnOffers;
    /**
     * Description for List all SKUs.
     * @param options The options parameters.
     */
    listSkus(options?: ListSkusOptionalParams): Promise<ListSkusResponse>;
    /**
     * Description for Verifies if this VNET is compatible with an App Service Environment by analyzing the
     * Network Security Group rules.
     * @param parameters VNET information
     * @param options The options parameters.
     */
    verifyHostingEnvironmentVnet(parameters: VnetParameters, options?: VerifyHostingEnvironmentVnetOptionalParams): Promise<VerifyHostingEnvironmentVnetResponse>;
    /**
     * Description for Move resources between resource groups.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param moveResourceEnvelope Object that represents the resource to move.
     * @param options The options parameters.
     */
    move(resourceGroupName: string, moveResourceEnvelope: CsmMoveResourceEnvelope, options?: MoveOptionalParams): Promise<void>;
    /**
     * Description for Validate if a resource can be created.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param validateRequest Request with the resources to validate.
     * @param options The options parameters.
     */
    validate(resourceGroupName: string, validateRequest: ValidateRequest, options?: ValidateOptionalParams): Promise<ValidateOperationResponse>;
    /**
     * Description for Validate whether a resource can be moved.
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param moveResourceEnvelope Object that represents the resource to move.
     * @param options The options parameters.
     */
    validateMove(resourceGroupName: string, moveResourceEnvelope: CsmMoveResourceEnvelope, options?: ValidateMoveOptionalParams): Promise<void>;
    /**
     * ListSourceControlsNext
     * @param nextLink The nextLink from the previous successful call to the ListSourceControls method.
     * @param options The options parameters.
     */
    private _listSourceControlsNext;
    /**
     * ListBillingMetersNext
     * @param nextLink The nextLink from the previous successful call to the ListBillingMeters method.
     * @param options The options parameters.
     */
    private _listBillingMetersNext;
    /**
     * ListCustomHostNameSitesNext
     * @param nextLink The nextLink from the previous successful call to the ListCustomHostNameSites
     *                 method.
     * @param options The options parameters.
     */
    private _listCustomHostNameSitesNext;
    /**
     * ListAseRegionsNext
     * @param nextLink The nextLink from the previous successful call to the ListAseRegions method.
     * @param options The options parameters.
     */
    private _listAseRegionsNext;
    /**
     * ListGeoRegionsNext
     * @param nextLink The nextLink from the previous successful call to the ListGeoRegions method.
     * @param options The options parameters.
     */
    private _listGeoRegionsNext;
    /**
     * ListSiteIdentifiersAssignedToHostNameNext
     * @param nameIdentifier Hostname information.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListSiteIdentifiersAssignedToHostName method.
     * @param options The options parameters.
     */
    private _listSiteIdentifiersAssignedToHostNameNext;
    /**
     * ListPremierAddOnOffersNext
     * @param nextLink The nextLink from the previous successful call to the ListPremierAddOnOffers method.
     * @param options The options parameters.
     */
    private _listPremierAddOnOffersNext;
    appServiceCertificateOrders: AppServiceCertificateOrders;
    certificateOrdersDiagnostics: CertificateOrdersDiagnostics;
    certificateRegistrationProvider: CertificateRegistrationProvider;
    domains: Domains;
    topLevelDomains: TopLevelDomains;
    domainRegistrationProvider: DomainRegistrationProvider;
    appServiceEnvironments: AppServiceEnvironments;
    appServicePlans: AppServicePlans;
    certificates: Certificates;
    containerApps: ContainerApps;
    containerAppsRevisions: ContainerAppsRevisions;
    deletedWebApps: DeletedWebApps;
    diagnostics: Diagnostics;
    global: Global;
    kubeEnvironments: KubeEnvironments;
    provider: Provider;
    recommendations: Recommendations;
    resourceHealthMetadataOperations: ResourceHealthMetadataOperations;
    getUsagesInLocation: GetUsagesInLocation;
    staticSites: StaticSites;
    webApps: WebApps;
    workflows: Workflows;
    workflowRuns: WorkflowRuns;
    workflowRunActions: WorkflowRunActions;
    workflowRunActionRepetitions: WorkflowRunActionRepetitions;
    workflowRunActionRepetitionsRequestHistories: WorkflowRunActionRepetitionsRequestHistories;
    workflowRunActionScopeRepetitions: WorkflowRunActionScopeRepetitions;
    workflowTriggers: WorkflowTriggers;
    workflowTriggerHistories: WorkflowTriggerHistories;
    workflowVersions: WorkflowVersions;
}
//# sourceMappingURL=webSiteManagementClient.d.ts.map