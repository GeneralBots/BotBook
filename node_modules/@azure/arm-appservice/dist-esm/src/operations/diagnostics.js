/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing Diagnostics operations. */
export class DiagnosticsImpl {
    /**
     * Initialize a new instance of the class Diagnostics class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Description for List Hosting Environment Detector Responses
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site Name
     * @param options The options parameters.
     */
    listHostingEnvironmentDetectorResponses(resourceGroupName, name, options) {
        const iter = this.listHostingEnvironmentDetectorResponsesPagingAll(resourceGroupName, name, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listHostingEnvironmentDetectorResponsesPagingPage(resourceGroupName, name, options, settings);
            },
        };
    }
    listHostingEnvironmentDetectorResponsesPagingPage(resourceGroupName, name, options, settings) {
        return __asyncGenerator(this, arguments, function* listHostingEnvironmentDetectorResponsesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listHostingEnvironmentDetectorResponses(resourceGroupName, name, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listHostingEnvironmentDetectorResponsesNext(resourceGroupName, name, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listHostingEnvironmentDetectorResponsesPagingAll(resourceGroupName, name, options) {
        return __asyncGenerator(this, arguments, function* listHostingEnvironmentDetectorResponsesPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listHostingEnvironmentDetectorResponsesPagingPage(resourceGroupName, name, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Description for List Site Detector Responses
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param options The options parameters.
     */
    listSiteDetectorResponses(resourceGroupName, siteName, options) {
        const iter = this.listSiteDetectorResponsesPagingAll(resourceGroupName, siteName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listSiteDetectorResponsesPagingPage(resourceGroupName, siteName, options, settings);
            },
        };
    }
    listSiteDetectorResponsesPagingPage(resourceGroupName, siteName, options, settings) {
        return __asyncGenerator(this, arguments, function* listSiteDetectorResponsesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listSiteDetectorResponses(resourceGroupName, siteName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listSiteDetectorResponsesNext(resourceGroupName, siteName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listSiteDetectorResponsesPagingAll(resourceGroupName, siteName, options) {
        return __asyncGenerator(this, arguments, function* listSiteDetectorResponsesPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listSiteDetectorResponsesPagingPage(resourceGroupName, siteName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Description for Get Diagnostics Categories
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param options The options parameters.
     */
    listSiteDiagnosticCategories(resourceGroupName, siteName, options) {
        const iter = this.listSiteDiagnosticCategoriesPagingAll(resourceGroupName, siteName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listSiteDiagnosticCategoriesPagingPage(resourceGroupName, siteName, options, settings);
            },
        };
    }
    listSiteDiagnosticCategoriesPagingPage(resourceGroupName, siteName, options, settings) {
        return __asyncGenerator(this, arguments, function* listSiteDiagnosticCategoriesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listSiteDiagnosticCategories(resourceGroupName, siteName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listSiteDiagnosticCategoriesNext(resourceGroupName, siteName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listSiteDiagnosticCategoriesPagingAll(resourceGroupName, siteName, options) {
        return __asyncGenerator(this, arguments, function* listSiteDiagnosticCategoriesPagingAll_1() {
            var _a, e_3, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listSiteDiagnosticCategoriesPagingPage(resourceGroupName, siteName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Description for Get Site Analyses
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param diagnosticCategory Diagnostic Category
     * @param options The options parameters.
     */
    listSiteAnalyses(resourceGroupName, siteName, diagnosticCategory, options) {
        const iter = this.listSiteAnalysesPagingAll(resourceGroupName, siteName, diagnosticCategory, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listSiteAnalysesPagingPage(resourceGroupName, siteName, diagnosticCategory, options, settings);
            },
        };
    }
    listSiteAnalysesPagingPage(resourceGroupName, siteName, diagnosticCategory, options, settings) {
        return __asyncGenerator(this, arguments, function* listSiteAnalysesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listSiteAnalyses(resourceGroupName, siteName, diagnosticCategory, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listSiteAnalysesNext(resourceGroupName, siteName, diagnosticCategory, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listSiteAnalysesPagingAll(resourceGroupName, siteName, diagnosticCategory, options) {
        return __asyncGenerator(this, arguments, function* listSiteAnalysesPagingAll_1() {
            var _a, e_4, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listSiteAnalysesPagingPage(resourceGroupName, siteName, diagnosticCategory, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Description for Get Detectors
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param diagnosticCategory Diagnostic Category
     * @param options The options parameters.
     */
    listSiteDetectors(resourceGroupName, siteName, diagnosticCategory, options) {
        const iter = this.listSiteDetectorsPagingAll(resourceGroupName, siteName, diagnosticCategory, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listSiteDetectorsPagingPage(resourceGroupName, siteName, diagnosticCategory, options, settings);
            },
        };
    }
    listSiteDetectorsPagingPage(resourceGroupName, siteName, diagnosticCategory, options, settings) {
        return __asyncGenerator(this, arguments, function* listSiteDetectorsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listSiteDetectors(resourceGroupName, siteName, diagnosticCategory, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listSiteDetectorsNext(resourceGroupName, siteName, diagnosticCategory, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listSiteDetectorsPagingAll(resourceGroupName, siteName, diagnosticCategory, options) {
        return __asyncGenerator(this, arguments, function* listSiteDetectorsPagingAll_1() {
            var _a, e_5, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listSiteDetectorsPagingPage(resourceGroupName, siteName, diagnosticCategory, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_5) throw e_5.error; }
            }
        });
    }
    /**
     * Description for List Site Detector Responses
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param slot Slot Name
     * @param options The options parameters.
     */
    listSiteDetectorResponsesSlot(resourceGroupName, siteName, slot, options) {
        const iter = this.listSiteDetectorResponsesSlotPagingAll(resourceGroupName, siteName, slot, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listSiteDetectorResponsesSlotPagingPage(resourceGroupName, siteName, slot, options, settings);
            },
        };
    }
    listSiteDetectorResponsesSlotPagingPage(resourceGroupName, siteName, slot, options, settings) {
        return __asyncGenerator(this, arguments, function* listSiteDetectorResponsesSlotPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listSiteDetectorResponsesSlot(resourceGroupName, siteName, slot, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listSiteDetectorResponsesSlotNext(resourceGroupName, siteName, slot, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listSiteDetectorResponsesSlotPagingAll(resourceGroupName, siteName, slot, options) {
        return __asyncGenerator(this, arguments, function* listSiteDetectorResponsesSlotPagingAll_1() {
            var _a, e_6, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listSiteDetectorResponsesSlotPagingPage(resourceGroupName, siteName, slot, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_6) throw e_6.error; }
            }
        });
    }
    /**
     * Description for Get Diagnostics Categories
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param slot Slot Name
     * @param options The options parameters.
     */
    listSiteDiagnosticCategoriesSlot(resourceGroupName, siteName, slot, options) {
        const iter = this.listSiteDiagnosticCategoriesSlotPagingAll(resourceGroupName, siteName, slot, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listSiteDiagnosticCategoriesSlotPagingPage(resourceGroupName, siteName, slot, options, settings);
            },
        };
    }
    listSiteDiagnosticCategoriesSlotPagingPage(resourceGroupName, siteName, slot, options, settings) {
        return __asyncGenerator(this, arguments, function* listSiteDiagnosticCategoriesSlotPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listSiteDiagnosticCategoriesSlot(resourceGroupName, siteName, slot, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listSiteDiagnosticCategoriesSlotNext(resourceGroupName, siteName, slot, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listSiteDiagnosticCategoriesSlotPagingAll(resourceGroupName, siteName, slot, options) {
        return __asyncGenerator(this, arguments, function* listSiteDiagnosticCategoriesSlotPagingAll_1() {
            var _a, e_7, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listSiteDiagnosticCategoriesSlotPagingPage(resourceGroupName, siteName, slot, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_7) throw e_7.error; }
            }
        });
    }
    /**
     * Description for Get Site Analyses
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param diagnosticCategory Diagnostic Category
     * @param slot Slot Name
     * @param options The options parameters.
     */
    listSiteAnalysesSlot(resourceGroupName, siteName, diagnosticCategory, slot, options) {
        const iter = this.listSiteAnalysesSlotPagingAll(resourceGroupName, siteName, diagnosticCategory, slot, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listSiteAnalysesSlotPagingPage(resourceGroupName, siteName, diagnosticCategory, slot, options, settings);
            },
        };
    }
    listSiteAnalysesSlotPagingPage(resourceGroupName, siteName, diagnosticCategory, slot, options, settings) {
        return __asyncGenerator(this, arguments, function* listSiteAnalysesSlotPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listSiteAnalysesSlot(resourceGroupName, siteName, diagnosticCategory, slot, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listSiteAnalysesSlotNext(resourceGroupName, siteName, diagnosticCategory, slot, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listSiteAnalysesSlotPagingAll(resourceGroupName, siteName, diagnosticCategory, slot, options) {
        return __asyncGenerator(this, arguments, function* listSiteAnalysesSlotPagingAll_1() {
            var _a, e_8, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listSiteAnalysesSlotPagingPage(resourceGroupName, siteName, diagnosticCategory, slot, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_8) throw e_8.error; }
            }
        });
    }
    /**
     * Description for Get Detectors
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param diagnosticCategory Diagnostic Category
     * @param slot Slot Name
     * @param options The options parameters.
     */
    listSiteDetectorsSlot(resourceGroupName, siteName, diagnosticCategory, slot, options) {
        const iter = this.listSiteDetectorsSlotPagingAll(resourceGroupName, siteName, diagnosticCategory, slot, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listSiteDetectorsSlotPagingPage(resourceGroupName, siteName, diagnosticCategory, slot, options, settings);
            },
        };
    }
    listSiteDetectorsSlotPagingPage(resourceGroupName, siteName, diagnosticCategory, slot, options, settings) {
        return __asyncGenerator(this, arguments, function* listSiteDetectorsSlotPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listSiteDetectorsSlot(resourceGroupName, siteName, diagnosticCategory, slot, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listSiteDetectorsSlotNext(resourceGroupName, siteName, diagnosticCategory, slot, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listSiteDetectorsSlotPagingAll(resourceGroupName, siteName, diagnosticCategory, slot, options) {
        return __asyncGenerator(this, arguments, function* listSiteDetectorsSlotPagingAll_1() {
            var _a, e_9, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listSiteDetectorsSlotPagingPage(resourceGroupName, siteName, diagnosticCategory, slot, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_9) throw e_9.error; }
            }
        });
    }
    /**
     * Description for List Hosting Environment Detector Responses
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site Name
     * @param options The options parameters.
     */
    _listHostingEnvironmentDetectorResponses(resourceGroupName, name, options) {
        return this.client.sendOperationRequest({ resourceGroupName, name, options }, listHostingEnvironmentDetectorResponsesOperationSpec);
    }
    /**
     * Description for Get Hosting Environment Detector Response
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name App Service Environment Name
     * @param detectorName Detector Resource Name
     * @param options The options parameters.
     */
    getHostingEnvironmentDetectorResponse(resourceGroupName, name, detectorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, name, detectorName, options }, getHostingEnvironmentDetectorResponseOperationSpec);
    }
    /**
     * Description for List Site Detector Responses
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param options The options parameters.
     */
    _listSiteDetectorResponses(resourceGroupName, siteName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, siteName, options }, listSiteDetectorResponsesOperationSpec);
    }
    /**
     * Description for Get site detector response
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param detectorName Detector Resource Name
     * @param options The options parameters.
     */
    getSiteDetectorResponse(resourceGroupName, siteName, detectorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, siteName, detectorName, options }, getSiteDetectorResponseOperationSpec);
    }
    /**
     * Description for Get Diagnostics Categories
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param options The options parameters.
     */
    _listSiteDiagnosticCategories(resourceGroupName, siteName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, siteName, options }, listSiteDiagnosticCategoriesOperationSpec);
    }
    /**
     * Description for Get Diagnostics Category
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param diagnosticCategory Diagnostic Category
     * @param options The options parameters.
     */
    getSiteDiagnosticCategory(resourceGroupName, siteName, diagnosticCategory, options) {
        return this.client.sendOperationRequest({ resourceGroupName, siteName, diagnosticCategory, options }, getSiteDiagnosticCategoryOperationSpec);
    }
    /**
     * Description for Get Site Analyses
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param diagnosticCategory Diagnostic Category
     * @param options The options parameters.
     */
    _listSiteAnalyses(resourceGroupName, siteName, diagnosticCategory, options) {
        return this.client.sendOperationRequest({ resourceGroupName, siteName, diagnosticCategory, options }, listSiteAnalysesOperationSpec);
    }
    /**
     * Description for Get Site Analysis
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param diagnosticCategory Diagnostic Category
     * @param analysisName Analysis Name
     * @param options The options parameters.
     */
    getSiteAnalysis(resourceGroupName, siteName, diagnosticCategory, analysisName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            siteName,
            diagnosticCategory,
            analysisName,
            options,
        }, getSiteAnalysisOperationSpec);
    }
    /**
     * Description for Execute Analysis
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param diagnosticCategory Category Name
     * @param analysisName Analysis Resource Name
     * @param options The options parameters.
     */
    executeSiteAnalysis(resourceGroupName, siteName, diagnosticCategory, analysisName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            siteName,
            diagnosticCategory,
            analysisName,
            options,
        }, executeSiteAnalysisOperationSpec);
    }
    /**
     * Description for Get Detectors
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param diagnosticCategory Diagnostic Category
     * @param options The options parameters.
     */
    _listSiteDetectors(resourceGroupName, siteName, diagnosticCategory, options) {
        return this.client.sendOperationRequest({ resourceGroupName, siteName, diagnosticCategory, options }, listSiteDetectorsOperationSpec);
    }
    /**
     * Description for Get Detector
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param diagnosticCategory Diagnostic Category
     * @param detectorName Detector Name
     * @param options The options parameters.
     */
    getSiteDetector(resourceGroupName, siteName, diagnosticCategory, detectorName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            siteName,
            diagnosticCategory,
            detectorName,
            options,
        }, getSiteDetectorOperationSpec);
    }
    /**
     * Description for Execute Detector
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param detectorName Detector Resource Name
     * @param diagnosticCategory Category Name
     * @param options The options parameters.
     */
    executeSiteDetector(resourceGroupName, siteName, detectorName, diagnosticCategory, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            siteName,
            detectorName,
            diagnosticCategory,
            options,
        }, executeSiteDetectorOperationSpec);
    }
    /**
     * Description for List Site Detector Responses
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param slot Slot Name
     * @param options The options parameters.
     */
    _listSiteDetectorResponsesSlot(resourceGroupName, siteName, slot, options) {
        return this.client.sendOperationRequest({ resourceGroupName, siteName, slot, options }, listSiteDetectorResponsesSlotOperationSpec);
    }
    /**
     * Description for Get site detector response
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param detectorName Detector Resource Name
     * @param slot Slot Name
     * @param options The options parameters.
     */
    getSiteDetectorResponseSlot(resourceGroupName, siteName, detectorName, slot, options) {
        return this.client.sendOperationRequest({ resourceGroupName, siteName, detectorName, slot, options }, getSiteDetectorResponseSlotOperationSpec);
    }
    /**
     * Description for Get Diagnostics Categories
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param slot Slot Name
     * @param options The options parameters.
     */
    _listSiteDiagnosticCategoriesSlot(resourceGroupName, siteName, slot, options) {
        return this.client.sendOperationRequest({ resourceGroupName, siteName, slot, options }, listSiteDiagnosticCategoriesSlotOperationSpec);
    }
    /**
     * Description for Get Diagnostics Category
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param diagnosticCategory Diagnostic Category
     * @param slot Slot Name
     * @param options The options parameters.
     */
    getSiteDiagnosticCategorySlot(resourceGroupName, siteName, diagnosticCategory, slot, options) {
        return this.client.sendOperationRequest({ resourceGroupName, siteName, diagnosticCategory, slot, options }, getSiteDiagnosticCategorySlotOperationSpec);
    }
    /**
     * Description for Get Site Analyses
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param diagnosticCategory Diagnostic Category
     * @param slot Slot Name
     * @param options The options parameters.
     */
    _listSiteAnalysesSlot(resourceGroupName, siteName, diagnosticCategory, slot, options) {
        return this.client.sendOperationRequest({ resourceGroupName, siteName, diagnosticCategory, slot, options }, listSiteAnalysesSlotOperationSpec);
    }
    /**
     * Description for Get Site Analysis
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param diagnosticCategory Diagnostic Category
     * @param analysisName Analysis Name
     * @param slot Slot - optional
     * @param options The options parameters.
     */
    getSiteAnalysisSlot(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            siteName,
            diagnosticCategory,
            analysisName,
            slot,
            options,
        }, getSiteAnalysisSlotOperationSpec);
    }
    /**
     * Description for Execute Analysis
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param diagnosticCategory Category Name
     * @param analysisName Analysis Resource Name
     * @param slot Slot Name
     * @param options The options parameters.
     */
    executeSiteAnalysisSlot(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            siteName,
            diagnosticCategory,
            analysisName,
            slot,
            options,
        }, executeSiteAnalysisSlotOperationSpec);
    }
    /**
     * Description for Get Detectors
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param diagnosticCategory Diagnostic Category
     * @param slot Slot Name
     * @param options The options parameters.
     */
    _listSiteDetectorsSlot(resourceGroupName, siteName, diagnosticCategory, slot, options) {
        return this.client.sendOperationRequest({ resourceGroupName, siteName, diagnosticCategory, slot, options }, listSiteDetectorsSlotOperationSpec);
    }
    /**
     * Description for Get Detector
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param diagnosticCategory Diagnostic Category
     * @param detectorName Detector Name
     * @param slot Slot Name
     * @param options The options parameters.
     */
    getSiteDetectorSlot(resourceGroupName, siteName, diagnosticCategory, detectorName, slot, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            siteName,
            diagnosticCategory,
            detectorName,
            slot,
            options,
        }, getSiteDetectorSlotOperationSpec);
    }
    /**
     * Description for Execute Detector
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param detectorName Detector Resource Name
     * @param diagnosticCategory Category Name
     * @param slot Slot Name
     * @param options The options parameters.
     */
    executeSiteDetectorSlot(resourceGroupName, siteName, detectorName, diagnosticCategory, slot, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            siteName,
            detectorName,
            diagnosticCategory,
            slot,
            options,
        }, executeSiteDetectorSlotOperationSpec);
    }
    /**
     * ListHostingEnvironmentDetectorResponsesNext
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param name Site Name
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListHostingEnvironmentDetectorResponses method.
     * @param options The options parameters.
     */
    _listHostingEnvironmentDetectorResponsesNext(resourceGroupName, name, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, name, nextLink, options }, listHostingEnvironmentDetectorResponsesNextOperationSpec);
    }
    /**
     * ListSiteDetectorResponsesNext
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param nextLink The nextLink from the previous successful call to the ListSiteDetectorResponses
     *                 method.
     * @param options The options parameters.
     */
    _listSiteDetectorResponsesNext(resourceGroupName, siteName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, siteName, nextLink, options }, listSiteDetectorResponsesNextOperationSpec);
    }
    /**
     * ListSiteDiagnosticCategoriesNext
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param nextLink The nextLink from the previous successful call to the ListSiteDiagnosticCategories
     *                 method.
     * @param options The options parameters.
     */
    _listSiteDiagnosticCategoriesNext(resourceGroupName, siteName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, siteName, nextLink, options }, listSiteDiagnosticCategoriesNextOperationSpec);
    }
    /**
     * ListSiteAnalysesNext
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param diagnosticCategory Diagnostic Category
     * @param nextLink The nextLink from the previous successful call to the ListSiteAnalyses method.
     * @param options The options parameters.
     */
    _listSiteAnalysesNext(resourceGroupName, siteName, diagnosticCategory, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, siteName, diagnosticCategory, nextLink, options }, listSiteAnalysesNextOperationSpec);
    }
    /**
     * ListSiteDetectorsNext
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param diagnosticCategory Diagnostic Category
     * @param nextLink The nextLink from the previous successful call to the ListSiteDetectors method.
     * @param options The options parameters.
     */
    _listSiteDetectorsNext(resourceGroupName, siteName, diagnosticCategory, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, siteName, diagnosticCategory, nextLink, options }, listSiteDetectorsNextOperationSpec);
    }
    /**
     * ListSiteDetectorResponsesSlotNext
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param slot Slot Name
     * @param nextLink The nextLink from the previous successful call to the ListSiteDetectorResponsesSlot
     *                 method.
     * @param options The options parameters.
     */
    _listSiteDetectorResponsesSlotNext(resourceGroupName, siteName, slot, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, siteName, slot, nextLink, options }, listSiteDetectorResponsesSlotNextOperationSpec);
    }
    /**
     * ListSiteDiagnosticCategoriesSlotNext
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param slot Slot Name
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListSiteDiagnosticCategoriesSlot method.
     * @param options The options parameters.
     */
    _listSiteDiagnosticCategoriesSlotNext(resourceGroupName, siteName, slot, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, siteName, slot, nextLink, options }, listSiteDiagnosticCategoriesSlotNextOperationSpec);
    }
    /**
     * ListSiteAnalysesSlotNext
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param diagnosticCategory Diagnostic Category
     * @param slot Slot Name
     * @param nextLink The nextLink from the previous successful call to the ListSiteAnalysesSlot method.
     * @param options The options parameters.
     */
    _listSiteAnalysesSlotNext(resourceGroupName, siteName, diagnosticCategory, slot, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            siteName,
            diagnosticCategory,
            slot,
            nextLink,
            options,
        }, listSiteAnalysesSlotNextOperationSpec);
    }
    /**
     * ListSiteDetectorsSlotNext
     * @param resourceGroupName Name of the resource group to which the resource belongs.
     * @param siteName Site Name
     * @param diagnosticCategory Diagnostic Category
     * @param slot Slot Name
     * @param nextLink The nextLink from the previous successful call to the ListSiteDetectorsSlot method.
     * @param options The options parameters.
     */
    _listSiteDetectorsSlotNext(resourceGroupName, siteName, diagnosticCategory, slot, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            siteName,
            diagnosticCategory,
            slot,
            nextLink,
            options,
        }, listSiteDetectorsSlotNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listHostingEnvironmentDetectorResponsesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/detectors",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DetectorResponseCollection,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.name,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const getHostingEnvironmentDetectorResponseOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/detectors/{detectorName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DetectorResponse,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.startTime,
        Parameters.endTime,
        Parameters.timeGrain,
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.detectorName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listSiteDetectorResponsesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/detectors",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DetectorResponseCollection,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.siteName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const getSiteDetectorResponseOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/detectors/{detectorName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DetectorResponse,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.startTime,
        Parameters.endTime,
        Parameters.timeGrain,
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.detectorName,
        Parameters.siteName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listSiteDiagnosticCategoriesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticCategoryCollection,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.siteName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const getSiteDiagnosticCategoryOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticCategory,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listSiteAnalysesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticAnalysisCollection,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const getSiteAnalysisOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses/{analysisName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AnalysisDefinition,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
        Parameters.analysisName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const executeSiteAnalysisOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses/{analysisName}/execute",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticAnalysis,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.startTime,
        Parameters.endTime,
        Parameters.timeGrain,
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
        Parameters.analysisName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listSiteDetectorsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticDetectorCollection,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const getSiteDetectorOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors/{detectorName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DetectorDefinitionResource,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.detectorName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const executeSiteDetectorOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors/{detectorName}/execute",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticDetectorResponse,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.startTime,
        Parameters.endTime,
        Parameters.timeGrain,
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.detectorName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listSiteDetectorResponsesSlotOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/detectors",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DetectorResponseCollection,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.slot,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const getSiteDetectorResponseSlotOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/detectors/{detectorName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DetectorResponse,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.startTime,
        Parameters.endTime,
        Parameters.timeGrain,
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.detectorName,
        Parameters.siteName,
        Parameters.slot,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listSiteDiagnosticCategoriesSlotOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticCategoryCollection,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.slot,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const getSiteDiagnosticCategorySlotOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticCategory,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
        Parameters.slot,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listSiteAnalysesSlotOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticAnalysisCollection,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
        Parameters.slot,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const getSiteAnalysisSlotOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses/{analysisName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AnalysisDefinition,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
        Parameters.analysisName,
        Parameters.slot,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const executeSiteAnalysisSlotOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses/{analysisName}/execute",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticAnalysis,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.startTime,
        Parameters.endTime,
        Parameters.timeGrain,
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
        Parameters.analysisName,
        Parameters.slot,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listSiteDetectorsSlotOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticDetectorCollection,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
        Parameters.slot,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const getSiteDetectorSlotOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors/{detectorName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DetectorDefinitionResource,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.detectorName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
        Parameters.slot,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const executeSiteDetectorSlotOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors/{detectorName}/execute",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticDetectorResponse,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.startTime,
        Parameters.endTime,
        Parameters.timeGrain,
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.detectorName,
        Parameters.siteName,
        Parameters.diagnosticCategory,
        Parameters.slot,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listHostingEnvironmentDetectorResponsesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DetectorResponseCollection,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.name,
        Parameters.nextLink,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listSiteDetectorResponsesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DetectorResponseCollection,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.siteName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listSiteDiagnosticCategoriesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticCategoryCollection,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.siteName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listSiteAnalysesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticAnalysisCollection,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.siteName,
        Parameters.diagnosticCategory,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listSiteDetectorsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticDetectorCollection,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.siteName,
        Parameters.diagnosticCategory,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listSiteDetectorResponsesSlotNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DetectorResponseCollection,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.siteName,
        Parameters.slot,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listSiteDiagnosticCategoriesSlotNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticCategoryCollection,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.siteName,
        Parameters.slot,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listSiteAnalysesSlotNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticAnalysisCollection,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.siteName,
        Parameters.diagnosticCategory,
        Parameters.slot,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listSiteDetectorsSlotNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DiagnosticDetectorCollection,
        },
        default: {
            bodyMapper: Mappers.DefaultErrorResponse,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.siteName,
        Parameters.diagnosticCategory,
        Parameters.slot,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
//# sourceMappingURL=diagnostics.js.map