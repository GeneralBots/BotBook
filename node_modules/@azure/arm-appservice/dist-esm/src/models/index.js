/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link ResourceNotRenewableReason} that the service accepts. */
export var KnownResourceNotRenewableReason;
(function (KnownResourceNotRenewableReason) {
    /** RegistrationStatusNotSupportedForRenewal */
    KnownResourceNotRenewableReason["RegistrationStatusNotSupportedForRenewal"] = "RegistrationStatusNotSupportedForRenewal";
    /** ExpirationNotInRenewalTimeRange */
    KnownResourceNotRenewableReason["ExpirationNotInRenewalTimeRange"] = "ExpirationNotInRenewalTimeRange";
    /** SubscriptionNotActive */
    KnownResourceNotRenewableReason["SubscriptionNotActive"] = "SubscriptionNotActive";
})(KnownResourceNotRenewableReason || (KnownResourceNotRenewableReason = {}));
/** Known values of {@link LoadBalancingMode} that the service accepts. */
export var KnownLoadBalancingMode;
(function (KnownLoadBalancingMode) {
    /** None */
    KnownLoadBalancingMode["None"] = "None";
    /** Web */
    KnownLoadBalancingMode["Web"] = "Web";
    /** Publishing */
    KnownLoadBalancingMode["Publishing"] = "Publishing";
    /** WebPublishing */
    KnownLoadBalancingMode["WebPublishing"] = "Web, Publishing";
})(KnownLoadBalancingMode || (KnownLoadBalancingMode = {}));
/** Known values of {@link UpgradePreference} that the service accepts. */
export var KnownUpgradePreference;
(function (KnownUpgradePreference) {
    /** No preference on when this App Service Environment will be upgraded */
    KnownUpgradePreference["None"] = "None";
    /** This App Service Environment will be upgraded before others in the same region that have Upgrade Preference 'Late' */
    KnownUpgradePreference["Early"] = "Early";
    /** This App Service Environment will be upgraded after others in the same region that have Upgrade Preference 'Early' */
    KnownUpgradePreference["Late"] = "Late";
    /** ASEv3 only. Once an upgrade is available, this App Service Environment will wait 10 days for the upgrade to be manually initiated. After 10 days the upgrade will begin automatically */
    KnownUpgradePreference["Manual"] = "Manual";
})(KnownUpgradePreference || (KnownUpgradePreference = {}));
/** Known values of {@link UpgradeAvailability} that the service accepts. */
export var KnownUpgradeAvailability;
(function (KnownUpgradeAvailability) {
    /** No upgrade is currently available for this App Service Environment */
    KnownUpgradeAvailability["None"] = "None";
    /** An upgrade is ready to be manually initiated on this App Service Environment */
    KnownUpgradeAvailability["Ready"] = "Ready";
})(KnownUpgradeAvailability || (KnownUpgradeAvailability = {}));
/** Known values of {@link ScmType} that the service accepts. */
export var KnownScmType;
(function (KnownScmType) {
    /** None */
    KnownScmType["None"] = "None";
    /** Dropbox */
    KnownScmType["Dropbox"] = "Dropbox";
    /** Tfs */
    KnownScmType["Tfs"] = "Tfs";
    /** LocalGit */
    KnownScmType["LocalGit"] = "LocalGit";
    /** GitHub */
    KnownScmType["GitHub"] = "GitHub";
    /** CodePlexGit */
    KnownScmType["CodePlexGit"] = "CodePlexGit";
    /** CodePlexHg */
    KnownScmType["CodePlexHg"] = "CodePlexHg";
    /** BitbucketGit */
    KnownScmType["BitbucketGit"] = "BitbucketGit";
    /** BitbucketHg */
    KnownScmType["BitbucketHg"] = "BitbucketHg";
    /** ExternalGit */
    KnownScmType["ExternalGit"] = "ExternalGit";
    /** ExternalHg */
    KnownScmType["ExternalHg"] = "ExternalHg";
    /** OneDrive */
    KnownScmType["OneDrive"] = "OneDrive";
    /** VSO */
    KnownScmType["VSO"] = "VSO";
    /** Vstsrm */
    KnownScmType["Vstsrm"] = "VSTSRM";
})(KnownScmType || (KnownScmType = {}));
/** Known values of {@link IpFilterTag} that the service accepts. */
export var KnownIpFilterTag;
(function (KnownIpFilterTag) {
    /** Default */
    KnownIpFilterTag["Default"] = "Default";
    /** XffProxy */
    KnownIpFilterTag["XffProxy"] = "XffProxy";
    /** ServiceTag */
    KnownIpFilterTag["ServiceTag"] = "ServiceTag";
})(KnownIpFilterTag || (KnownIpFilterTag = {}));
/** Known values of {@link DefaultAction} that the service accepts. */
export var KnownDefaultAction;
(function (KnownDefaultAction) {
    /** Allow */
    KnownDefaultAction["Allow"] = "Allow";
    /** Deny */
    KnownDefaultAction["Deny"] = "Deny";
})(KnownDefaultAction || (KnownDefaultAction = {}));
/** Known values of {@link SupportedTlsVersions} that the service accepts. */
export var KnownSupportedTlsVersions;
(function (KnownSupportedTlsVersions) {
    /** One0 */
    KnownSupportedTlsVersions["One0"] = "1.0";
    /** One1 */
    KnownSupportedTlsVersions["One1"] = "1.1";
    /** One2 */
    KnownSupportedTlsVersions["One2"] = "1.2";
    /** One3 */
    KnownSupportedTlsVersions["One3"] = "1.3";
})(KnownSupportedTlsVersions || (KnownSupportedTlsVersions = {}));
/** Known values of {@link TlsCipherSuites} that the service accepts. */
export var KnownTlsCipherSuites;
(function (KnownTlsCipherSuites) {
    /** TLSAES256GCMSHA384 */
    KnownTlsCipherSuites["TLSAES256GCMSHA384"] = "TLS_AES_256_GCM_SHA384";
    /** TLSAES128GCMSHA256 */
    KnownTlsCipherSuites["TLSAES128GCMSHA256"] = "TLS_AES_128_GCM_SHA256";
    /** TLSEcdheEcdsaWithAES256GCMSHA384 */
    KnownTlsCipherSuites["TLSEcdheEcdsaWithAES256GCMSHA384"] = "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384";
    /** TLSEcdheEcdsaWithAES128CBCSHA256 */
    KnownTlsCipherSuites["TLSEcdheEcdsaWithAES128CBCSHA256"] = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256";
    /** TLSEcdheEcdsaWithAES128GCMSHA256 */
    KnownTlsCipherSuites["TLSEcdheEcdsaWithAES128GCMSHA256"] = "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256";
    /** TLSEcdheRSAWithAES256GCMSHA384 */
    KnownTlsCipherSuites["TLSEcdheRSAWithAES256GCMSHA384"] = "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384";
    /** TLSEcdheRSAWithAES128GCMSHA256 */
    KnownTlsCipherSuites["TLSEcdheRSAWithAES128GCMSHA256"] = "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256";
    /** TLSEcdheRSAWithAES256CBCSHA384 */
    KnownTlsCipherSuites["TLSEcdheRSAWithAES256CBCSHA384"] = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384";
    /** TLSEcdheRSAWithAES128CBCSHA256 */
    KnownTlsCipherSuites["TLSEcdheRSAWithAES128CBCSHA256"] = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256";
    /** TLSEcdheRSAWithAES256CBCSHA */
    KnownTlsCipherSuites["TLSEcdheRSAWithAES256CBCSHA"] = "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA";
    /** TLSEcdheRSAWithAES128CBCSHA */
    KnownTlsCipherSuites["TLSEcdheRSAWithAES128CBCSHA"] = "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA";
    /** TLSRSAWithAES256GCMSHA384 */
    KnownTlsCipherSuites["TLSRSAWithAES256GCMSHA384"] = "TLS_RSA_WITH_AES_256_GCM_SHA384";
    /** TLSRSAWithAES128GCMSHA256 */
    KnownTlsCipherSuites["TLSRSAWithAES128GCMSHA256"] = "TLS_RSA_WITH_AES_128_GCM_SHA256";
    /** TLSRSAWithAES256CBCSHA256 */
    KnownTlsCipherSuites["TLSRSAWithAES256CBCSHA256"] = "TLS_RSA_WITH_AES_256_CBC_SHA256";
    /** TLSRSAWithAES128CBCSHA256 */
    KnownTlsCipherSuites["TLSRSAWithAES128CBCSHA256"] = "TLS_RSA_WITH_AES_128_CBC_SHA256";
    /** TLSRSAWithAES256CBCSHA */
    KnownTlsCipherSuites["TLSRSAWithAES256CBCSHA"] = "TLS_RSA_WITH_AES_256_CBC_SHA";
    /** TLSRSAWithAES128CBCSHA */
    KnownTlsCipherSuites["TLSRSAWithAES128CBCSHA"] = "TLS_RSA_WITH_AES_128_CBC_SHA";
})(KnownTlsCipherSuites || (KnownTlsCipherSuites = {}));
/** Known values of {@link FtpsState} that the service accepts. */
export var KnownFtpsState;
(function (KnownFtpsState) {
    /** AllAllowed */
    KnownFtpsState["AllAllowed"] = "AllAllowed";
    /** FtpsOnly */
    KnownFtpsState["FtpsOnly"] = "FtpsOnly";
    /** Disabled */
    KnownFtpsState["Disabled"] = "Disabled";
})(KnownFtpsState || (KnownFtpsState = {}));
/** Known values of {@link AzureStorageProtocol} that the service accepts. */
export var KnownAzureStorageProtocol;
(function (KnownAzureStorageProtocol) {
    /** Smb */
    KnownAzureStorageProtocol["Smb"] = "Smb";
    /** Http */
    KnownAzureStorageProtocol["Http"] = "Http";
    /** Nfs */
    KnownAzureStorageProtocol["Nfs"] = "Nfs";
})(KnownAzureStorageProtocol || (KnownAzureStorageProtocol = {}));
/** Known values of {@link FunctionsDeploymentStorageType} that the service accepts. */
export var KnownFunctionsDeploymentStorageType;
(function (KnownFunctionsDeploymentStorageType) {
    /** BlobContainer */
    KnownFunctionsDeploymentStorageType["BlobContainer"] = "blobContainer";
})(KnownFunctionsDeploymentStorageType || (KnownFunctionsDeploymentStorageType = {}));
/** Known values of {@link AuthenticationType} that the service accepts. */
export var KnownAuthenticationType;
(function (KnownAuthenticationType) {
    /** SystemAssignedIdentity */
    KnownAuthenticationType["SystemAssignedIdentity"] = "SystemAssignedIdentity";
    /** UserAssignedIdentity */
    KnownAuthenticationType["UserAssignedIdentity"] = "UserAssignedIdentity";
    /** StorageAccountConnectionString */
    KnownAuthenticationType["StorageAccountConnectionString"] = "StorageAccountConnectionString";
})(KnownAuthenticationType || (KnownAuthenticationType = {}));
/** Known values of {@link RuntimeName} that the service accepts. */
export var KnownRuntimeName;
(function (KnownRuntimeName) {
    /** DotnetIsolated */
    KnownRuntimeName["DotnetIsolated"] = "dotnet-isolated";
    /** Node */
    KnownRuntimeName["Node"] = "node";
    /** Java */
    KnownRuntimeName["Java"] = "java";
    /** Powershell */
    KnownRuntimeName["Powershell"] = "powershell";
    /** Python */
    KnownRuntimeName["Python"] = "python";
    /** Custom */
    KnownRuntimeName["Custom"] = "custom";
})(KnownRuntimeName || (KnownRuntimeName = {}));
/** Known values of {@link DaprLogLevel} that the service accepts. */
export var KnownDaprLogLevel;
(function (KnownDaprLogLevel) {
    /** Info */
    KnownDaprLogLevel["Info"] = "info";
    /** Debug */
    KnownDaprLogLevel["Debug"] = "debug";
    /** Warn */
    KnownDaprLogLevel["Warn"] = "warn";
    /** Error */
    KnownDaprLogLevel["Error"] = "error";
})(KnownDaprLogLevel || (KnownDaprLogLevel = {}));
/** Known values of {@link RouteType} that the service accepts. */
export var KnownRouteType;
(function (KnownRouteType) {
    /** Default */
    KnownRouteType["Default"] = "DEFAULT";
    /** Inherited */
    KnownRouteType["Inherited"] = "INHERITED";
    /** Static */
    KnownRouteType["Static"] = "STATIC";
})(KnownRouteType || (KnownRouteType = {}));
/** Known values of {@link ContainerAppProvisioningState} that the service accepts. */
export var KnownContainerAppProvisioningState;
(function (KnownContainerAppProvisioningState) {
    /** InProgress */
    KnownContainerAppProvisioningState["InProgress"] = "InProgress";
    /** Succeeded */
    KnownContainerAppProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownContainerAppProvisioningState["Failed"] = "Failed";
    /** Canceled */
    KnownContainerAppProvisioningState["Canceled"] = "Canceled";
})(KnownContainerAppProvisioningState || (KnownContainerAppProvisioningState = {}));
/** Known values of {@link ActiveRevisionsMode} that the service accepts. */
export var KnownActiveRevisionsMode;
(function (KnownActiveRevisionsMode) {
    /** Multiple */
    KnownActiveRevisionsMode["Multiple"] = "multiple";
    /** Single */
    KnownActiveRevisionsMode["Single"] = "single";
})(KnownActiveRevisionsMode || (KnownActiveRevisionsMode = {}));
/** Known values of {@link IngressTransportMethod} that the service accepts. */
export var KnownIngressTransportMethod;
(function (KnownIngressTransportMethod) {
    /** Auto */
    KnownIngressTransportMethod["Auto"] = "auto";
    /** Http */
    KnownIngressTransportMethod["Http"] = "http";
    /** Http2 */
    KnownIngressTransportMethod["Http2"] = "http2";
})(KnownIngressTransportMethod || (KnownIngressTransportMethod = {}));
/** Known values of {@link RevisionHealthState} that the service accepts. */
export var KnownRevisionHealthState;
(function (KnownRevisionHealthState) {
    /** Healthy */
    KnownRevisionHealthState["Healthy"] = "Healthy";
    /** Unhealthy */
    KnownRevisionHealthState["Unhealthy"] = "Unhealthy";
    /** None */
    KnownRevisionHealthState["None"] = "None";
})(KnownRevisionHealthState || (KnownRevisionHealthState = {}));
/** Known values of {@link RevisionProvisioningState} that the service accepts. */
export var KnownRevisionProvisioningState;
(function (KnownRevisionProvisioningState) {
    /** Provisioning */
    KnownRevisionProvisioningState["Provisioning"] = "Provisioning";
    /** Provisioned */
    KnownRevisionProvisioningState["Provisioned"] = "Provisioned";
    /** Failed */
    KnownRevisionProvisioningState["Failed"] = "Failed";
    /** Deprovisioning */
    KnownRevisionProvisioningState["Deprovisioning"] = "Deprovisioning";
    /** Deprovisioned */
    KnownRevisionProvisioningState["Deprovisioned"] = "Deprovisioned";
})(KnownRevisionProvisioningState || (KnownRevisionProvisioningState = {}));
/** Known values of {@link ProviderOsTypeSelected} that the service accepts. */
export var KnownProviderOsTypeSelected;
(function (KnownProviderOsTypeSelected) {
    /** Windows */
    KnownProviderOsTypeSelected["Windows"] = "Windows";
    /** Linux */
    KnownProviderOsTypeSelected["Linux"] = "Linux";
    /** WindowsFunctions */
    KnownProviderOsTypeSelected["WindowsFunctions"] = "WindowsFunctions";
    /** LinuxFunctions */
    KnownProviderOsTypeSelected["LinuxFunctions"] = "LinuxFunctions";
    /** All */
    KnownProviderOsTypeSelected["All"] = "All";
})(KnownProviderOsTypeSelected || (KnownProviderOsTypeSelected = {}));
/** Known values of {@link ProviderStackOsType} that the service accepts. */
export var KnownProviderStackOsType;
(function (KnownProviderStackOsType) {
    /** Windows */
    KnownProviderStackOsType["Windows"] = "Windows";
    /** Linux */
    KnownProviderStackOsType["Linux"] = "Linux";
    /** All */
    KnownProviderStackOsType["All"] = "All";
})(KnownProviderStackOsType || (KnownProviderStackOsType = {}));
/** Known values of {@link ResourceScopeType} that the service accepts. */
export var KnownResourceScopeType;
(function (KnownResourceScopeType) {
    /** ServerFarm */
    KnownResourceScopeType["ServerFarm"] = "ServerFarm";
    /** Subscription */
    KnownResourceScopeType["Subscription"] = "Subscription";
    /** WebSite */
    KnownResourceScopeType["WebSite"] = "WebSite";
})(KnownResourceScopeType || (KnownResourceScopeType = {}));
/** Known values of {@link CheckNameResourceTypes} that the service accepts. */
export var KnownCheckNameResourceTypes;
(function (KnownCheckNameResourceTypes) {
    /** Site */
    KnownCheckNameResourceTypes["Site"] = "Site";
    /** Slot */
    KnownCheckNameResourceTypes["Slot"] = "Slot";
    /** HostingEnvironment */
    KnownCheckNameResourceTypes["HostingEnvironment"] = "HostingEnvironment";
    /** PublishingUser */
    KnownCheckNameResourceTypes["PublishingUser"] = "PublishingUser";
    /** MicrosoftWebSites */
    KnownCheckNameResourceTypes["MicrosoftWebSites"] = "Microsoft.Web/sites";
    /** MicrosoftWebSitesSlots */
    KnownCheckNameResourceTypes["MicrosoftWebSitesSlots"] = "Microsoft.Web/sites/slots";
    /** MicrosoftWebHostingEnvironments */
    KnownCheckNameResourceTypes["MicrosoftWebHostingEnvironments"] = "Microsoft.Web/hostingEnvironments";
    /** MicrosoftWebPublishingUsers */
    KnownCheckNameResourceTypes["MicrosoftWebPublishingUsers"] = "Microsoft.Web/publishingUsers";
})(KnownCheckNameResourceTypes || (KnownCheckNameResourceTypes = {}));
/** Known values of {@link InAvailabilityReasonType} that the service accepts. */
export var KnownInAvailabilityReasonType;
(function (KnownInAvailabilityReasonType) {
    /** Invalid */
    KnownInAvailabilityReasonType["Invalid"] = "Invalid";
    /** AlreadyExists */
    KnownInAvailabilityReasonType["AlreadyExists"] = "AlreadyExists";
})(KnownInAvailabilityReasonType || (KnownInAvailabilityReasonType = {}));
/** Known values of {@link SkuName} that the service accepts. */
export var KnownSkuName;
(function (KnownSkuName) {
    /** Free */
    KnownSkuName["Free"] = "Free";
    /** Shared */
    KnownSkuName["Shared"] = "Shared";
    /** Basic */
    KnownSkuName["Basic"] = "Basic";
    /** Standard */
    KnownSkuName["Standard"] = "Standard";
    /** Premium */
    KnownSkuName["Premium"] = "Premium";
    /** Dynamic */
    KnownSkuName["Dynamic"] = "Dynamic";
    /** Isolated */
    KnownSkuName["Isolated"] = "Isolated";
    /** IsolatedV2 */
    KnownSkuName["IsolatedV2"] = "IsolatedV2";
    /** PremiumV2 */
    KnownSkuName["PremiumV2"] = "PremiumV2";
    /** PremiumV3 */
    KnownSkuName["PremiumV3"] = "PremiumV3";
    /** PremiumContainer */
    KnownSkuName["PremiumContainer"] = "PremiumContainer";
    /** ElasticPremium */
    KnownSkuName["ElasticPremium"] = "ElasticPremium";
    /** ElasticIsolated */
    KnownSkuName["ElasticIsolated"] = "ElasticIsolated";
    /** FlexConsumption */
    KnownSkuName["FlexConsumption"] = "FlexConsumption";
})(KnownSkuName || (KnownSkuName = {}));
/** Known values of {@link ValidateResourceTypes} that the service accepts. */
export var KnownValidateResourceTypes;
(function (KnownValidateResourceTypes) {
    /** ServerFarm */
    KnownValidateResourceTypes["ServerFarm"] = "ServerFarm";
    /** Site */
    KnownValidateResourceTypes["Site"] = "Site";
    /** MicrosoftWebHostingEnvironments */
    KnownValidateResourceTypes["MicrosoftWebHostingEnvironments"] = "Microsoft.Web/hostingEnvironments";
})(KnownValidateResourceTypes || (KnownValidateResourceTypes = {}));
/** Known values of {@link EnterpriseGradeCdnStatus} that the service accepts. */
export var KnownEnterpriseGradeCdnStatus;
(function (KnownEnterpriseGradeCdnStatus) {
    /** Enabled */
    KnownEnterpriseGradeCdnStatus["Enabled"] = "Enabled";
    /** Enabling */
    KnownEnterpriseGradeCdnStatus["Enabling"] = "Enabling";
    /** Disabled */
    KnownEnterpriseGradeCdnStatus["Disabled"] = "Disabled";
    /** Disabling */
    KnownEnterpriseGradeCdnStatus["Disabling"] = "Disabling";
})(KnownEnterpriseGradeCdnStatus || (KnownEnterpriseGradeCdnStatus = {}));
/** Known values of {@link BuildStatus} that the service accepts. */
export var KnownBuildStatus;
(function (KnownBuildStatus) {
    /** WaitingForDeployment */
    KnownBuildStatus["WaitingForDeployment"] = "WaitingForDeployment";
    /** Uploading */
    KnownBuildStatus["Uploading"] = "Uploading";
    /** Deploying */
    KnownBuildStatus["Deploying"] = "Deploying";
    /** Ready */
    KnownBuildStatus["Ready"] = "Ready";
    /** Failed */
    KnownBuildStatus["Failed"] = "Failed";
    /** Deleting */
    KnownBuildStatus["Deleting"] = "Deleting";
    /** Detached */
    KnownBuildStatus["Detached"] = "Detached";
})(KnownBuildStatus || (KnownBuildStatus = {}));
/** Known values of {@link TriggerTypes} that the service accepts. */
export var KnownTriggerTypes;
(function (KnownTriggerTypes) {
    /** HttpTrigger */
    KnownTriggerTypes["HttpTrigger"] = "HttpTrigger";
    /** Unknown */
    KnownTriggerTypes["Unknown"] = "Unknown";
})(KnownTriggerTypes || (KnownTriggerTypes = {}));
/** Known values of {@link BasicAuthName} that the service accepts. */
export var KnownBasicAuthName;
(function (KnownBasicAuthName) {
    /** Default */
    KnownBasicAuthName["Default"] = "default";
})(KnownBasicAuthName || (KnownBasicAuthName = {}));
/** Known values of {@link CustomDomainStatus} that the service accepts. */
export var KnownCustomDomainStatus;
(function (KnownCustomDomainStatus) {
    /** RetrievingValidationToken */
    KnownCustomDomainStatus["RetrievingValidationToken"] = "RetrievingValidationToken";
    /** Validating */
    KnownCustomDomainStatus["Validating"] = "Validating";
    /** Adding */
    KnownCustomDomainStatus["Adding"] = "Adding";
    /** Ready */
    KnownCustomDomainStatus["Ready"] = "Ready";
    /** Failed */
    KnownCustomDomainStatus["Failed"] = "Failed";
    /** Deleting */
    KnownCustomDomainStatus["Deleting"] = "Deleting";
    /** Unhealthy */
    KnownCustomDomainStatus["Unhealthy"] = "Unhealthy";
})(KnownCustomDomainStatus || (KnownCustomDomainStatus = {}));
/** Known values of {@link DatabaseType} that the service accepts. */
export var KnownDatabaseType;
(function (KnownDatabaseType) {
    /** SqlAzure */
    KnownDatabaseType["SqlAzure"] = "SqlAzure";
    /** MySql */
    KnownDatabaseType["MySql"] = "MySql";
    /** LocalMySql */
    KnownDatabaseType["LocalMySql"] = "LocalMySql";
    /** PostgreSql */
    KnownDatabaseType["PostgreSql"] = "PostgreSql";
})(KnownDatabaseType || (KnownDatabaseType = {}));
/** Known values of {@link DeploymentBuildStatus} that the service accepts. */
export var KnownDeploymentBuildStatus;
(function (KnownDeploymentBuildStatus) {
    /** TimedOut */
    KnownDeploymentBuildStatus["TimedOut"] = "TimedOut";
    /** RuntimeFailed */
    KnownDeploymentBuildStatus["RuntimeFailed"] = "RuntimeFailed";
    /** BuildAborted */
    KnownDeploymentBuildStatus["BuildAborted"] = "BuildAborted";
    /** BuildFailed */
    KnownDeploymentBuildStatus["BuildFailed"] = "BuildFailed";
    /** BuildRequestReceived */
    KnownDeploymentBuildStatus["BuildRequestReceived"] = "BuildRequestReceived";
    /** BuildPending */
    KnownDeploymentBuildStatus["BuildPending"] = "BuildPending";
    /** BuildInProgress */
    KnownDeploymentBuildStatus["BuildInProgress"] = "BuildInProgress";
    /** BuildSuccessful */
    KnownDeploymentBuildStatus["BuildSuccessful"] = "BuildSuccessful";
    /** PostBuildRestartRequired */
    KnownDeploymentBuildStatus["PostBuildRestartRequired"] = "PostBuildRestartRequired";
    /** StartPolling */
    KnownDeploymentBuildStatus["StartPolling"] = "StartPolling";
    /** StartPollingWithRestart */
    KnownDeploymentBuildStatus["StartPollingWithRestart"] = "StartPollingWithRestart";
    /** RuntimeStarting */
    KnownDeploymentBuildStatus["RuntimeStarting"] = "RuntimeStarting";
    /** RuntimeSuccessful */
    KnownDeploymentBuildStatus["RuntimeSuccessful"] = "RuntimeSuccessful";
})(KnownDeploymentBuildStatus || (KnownDeploymentBuildStatus = {}));
/** Known values of {@link PublishingProfileFormat} that the service accepts. */
export var KnownPublishingProfileFormat;
(function (KnownPublishingProfileFormat) {
    /** FileZilla3 */
    KnownPublishingProfileFormat["FileZilla3"] = "FileZilla3";
    /** WebDeploy */
    KnownPublishingProfileFormat["WebDeploy"] = "WebDeploy";
    /** Ftp */
    KnownPublishingProfileFormat["Ftp"] = "Ftp";
})(KnownPublishingProfileFormat || (KnownPublishingProfileFormat = {}));
/** Known values of {@link WorkflowState} that the service accepts. */
export var KnownWorkflowState;
(function (KnownWorkflowState) {
    /** NotSpecified */
    KnownWorkflowState["NotSpecified"] = "NotSpecified";
    /** Completed */
    KnownWorkflowState["Completed"] = "Completed";
    /** Enabled */
    KnownWorkflowState["Enabled"] = "Enabled";
    /** Disabled */
    KnownWorkflowState["Disabled"] = "Disabled";
    /** Deleted */
    KnownWorkflowState["Deleted"] = "Deleted";
    /** Suspended */
    KnownWorkflowState["Suspended"] = "Suspended";
})(KnownWorkflowState || (KnownWorkflowState = {}));
/** Known values of {@link KeyType} that the service accepts. */
export var KnownKeyType;
(function (KnownKeyType) {
    /** NotSpecified */
    KnownKeyType["NotSpecified"] = "NotSpecified";
    /** Primary */
    KnownKeyType["Primary"] = "Primary";
    /** Secondary */
    KnownKeyType["Secondary"] = "Secondary";
})(KnownKeyType || (KnownKeyType = {}));
/** Known values of {@link WorkflowStatus} that the service accepts. */
export var KnownWorkflowStatus;
(function (KnownWorkflowStatus) {
    /** NotSpecified */
    KnownWorkflowStatus["NotSpecified"] = "NotSpecified";
    /** Paused */
    KnownWorkflowStatus["Paused"] = "Paused";
    /** Running */
    KnownWorkflowStatus["Running"] = "Running";
    /** Waiting */
    KnownWorkflowStatus["Waiting"] = "Waiting";
    /** Succeeded */
    KnownWorkflowStatus["Succeeded"] = "Succeeded";
    /** Skipped */
    KnownWorkflowStatus["Skipped"] = "Skipped";
    /** Suspended */
    KnownWorkflowStatus["Suspended"] = "Suspended";
    /** Cancelled */
    KnownWorkflowStatus["Cancelled"] = "Cancelled";
    /** Failed */
    KnownWorkflowStatus["Failed"] = "Failed";
    /** Faulted */
    KnownWorkflowStatus["Faulted"] = "Faulted";
    /** TimedOut */
    KnownWorkflowStatus["TimedOut"] = "TimedOut";
    /** Aborted */
    KnownWorkflowStatus["Aborted"] = "Aborted";
    /** Ignored */
    KnownWorkflowStatus["Ignored"] = "Ignored";
})(KnownWorkflowStatus || (KnownWorkflowStatus = {}));
/** Known values of {@link ParameterType} that the service accepts. */
export var KnownParameterType;
(function (KnownParameterType) {
    /** NotSpecified */
    KnownParameterType["NotSpecified"] = "NotSpecified";
    /** String */
    KnownParameterType["String"] = "String";
    /** SecureString */
    KnownParameterType["SecureString"] = "SecureString";
    /** Int */
    KnownParameterType["Int"] = "Int";
    /** Float */
    KnownParameterType["Float"] = "Float";
    /** Bool */
    KnownParameterType["Bool"] = "Bool";
    /** Array */
    KnownParameterType["Array"] = "Array";
    /** Object */
    KnownParameterType["Object"] = "Object";
    /** SecureObject */
    KnownParameterType["SecureObject"] = "SecureObject";
})(KnownParameterType || (KnownParameterType = {}));
/** Known values of {@link WorkflowTriggerProvisioningState} that the service accepts. */
export var KnownWorkflowTriggerProvisioningState;
(function (KnownWorkflowTriggerProvisioningState) {
    /** NotSpecified */
    KnownWorkflowTriggerProvisioningState["NotSpecified"] = "NotSpecified";
    /** Accepted */
    KnownWorkflowTriggerProvisioningState["Accepted"] = "Accepted";
    /** Running */
    KnownWorkflowTriggerProvisioningState["Running"] = "Running";
    /** Ready */
    KnownWorkflowTriggerProvisioningState["Ready"] = "Ready";
    /** Creating */
    KnownWorkflowTriggerProvisioningState["Creating"] = "Creating";
    /** Created */
    KnownWorkflowTriggerProvisioningState["Created"] = "Created";
    /** Deleting */
    KnownWorkflowTriggerProvisioningState["Deleting"] = "Deleting";
    /** Deleted */
    KnownWorkflowTriggerProvisioningState["Deleted"] = "Deleted";
    /** Canceled */
    KnownWorkflowTriggerProvisioningState["Canceled"] = "Canceled";
    /** Failed */
    KnownWorkflowTriggerProvisioningState["Failed"] = "Failed";
    /** Succeeded */
    KnownWorkflowTriggerProvisioningState["Succeeded"] = "Succeeded";
    /** Moving */
    KnownWorkflowTriggerProvisioningState["Moving"] = "Moving";
    /** Updating */
    KnownWorkflowTriggerProvisioningState["Updating"] = "Updating";
    /** Registering */
    KnownWorkflowTriggerProvisioningState["Registering"] = "Registering";
    /** Registered */
    KnownWorkflowTriggerProvisioningState["Registered"] = "Registered";
    /** Unregistering */
    KnownWorkflowTriggerProvisioningState["Unregistering"] = "Unregistering";
    /** Unregistered */
    KnownWorkflowTriggerProvisioningState["Unregistered"] = "Unregistered";
    /** Completed */
    KnownWorkflowTriggerProvisioningState["Completed"] = "Completed";
})(KnownWorkflowTriggerProvisioningState || (KnownWorkflowTriggerProvisioningState = {}));
/** Known values of {@link RecurrenceFrequency} that the service accepts. */
export var KnownRecurrenceFrequency;
(function (KnownRecurrenceFrequency) {
    /** NotSpecified */
    KnownRecurrenceFrequency["NotSpecified"] = "NotSpecified";
    /** Second */
    KnownRecurrenceFrequency["Second"] = "Second";
    /** Minute */
    KnownRecurrenceFrequency["Minute"] = "Minute";
    /** Hour */
    KnownRecurrenceFrequency["Hour"] = "Hour";
    /** Day */
    KnownRecurrenceFrequency["Day"] = "Day";
    /** Week */
    KnownRecurrenceFrequency["Week"] = "Week";
    /** Month */
    KnownRecurrenceFrequency["Month"] = "Month";
    /** Year */
    KnownRecurrenceFrequency["Year"] = "Year";
})(KnownRecurrenceFrequency || (KnownRecurrenceFrequency = {}));
/** Known values of {@link WorkflowProvisioningState} that the service accepts. */
export var KnownWorkflowProvisioningState;
(function (KnownWorkflowProvisioningState) {
    /** NotSpecified */
    KnownWorkflowProvisioningState["NotSpecified"] = "NotSpecified";
    /** Accepted */
    KnownWorkflowProvisioningState["Accepted"] = "Accepted";
    /** Running */
    KnownWorkflowProvisioningState["Running"] = "Running";
    /** Ready */
    KnownWorkflowProvisioningState["Ready"] = "Ready";
    /** Creating */
    KnownWorkflowProvisioningState["Creating"] = "Creating";
    /** Created */
    KnownWorkflowProvisioningState["Created"] = "Created";
    /** Deleting */
    KnownWorkflowProvisioningState["Deleting"] = "Deleting";
    /** Deleted */
    KnownWorkflowProvisioningState["Deleted"] = "Deleted";
    /** Canceled */
    KnownWorkflowProvisioningState["Canceled"] = "Canceled";
    /** Failed */
    KnownWorkflowProvisioningState["Failed"] = "Failed";
    /** Succeeded */
    KnownWorkflowProvisioningState["Succeeded"] = "Succeeded";
    /** Moving */
    KnownWorkflowProvisioningState["Moving"] = "Moving";
    /** Updating */
    KnownWorkflowProvisioningState["Updating"] = "Updating";
    /** Registering */
    KnownWorkflowProvisioningState["Registering"] = "Registering";
    /** Registered */
    KnownWorkflowProvisioningState["Registered"] = "Registered";
    /** Unregistering */
    KnownWorkflowProvisioningState["Unregistering"] = "Unregistering";
    /** Unregistered */
    KnownWorkflowProvisioningState["Unregistered"] = "Unregistered";
    /** Completed */
    KnownWorkflowProvisioningState["Completed"] = "Completed";
    /** Renewing */
    KnownWorkflowProvisioningState["Renewing"] = "Renewing";
    /** Pending */
    KnownWorkflowProvisioningState["Pending"] = "Pending";
    /** Waiting */
    KnownWorkflowProvisioningState["Waiting"] = "Waiting";
    /** InProgress */
    KnownWorkflowProvisioningState["InProgress"] = "InProgress";
})(KnownWorkflowProvisioningState || (KnownWorkflowProvisioningState = {}));
/** Known values of {@link OpenAuthenticationProviderType} that the service accepts. */
export var KnownOpenAuthenticationProviderType;
(function (KnownOpenAuthenticationProviderType) {
    /** AAD */
    KnownOpenAuthenticationProviderType["AAD"] = "AAD";
})(KnownOpenAuthenticationProviderType || (KnownOpenAuthenticationProviderType = {}));
/** Known values of {@link WorkflowSkuName} that the service accepts. */
export var KnownWorkflowSkuName;
(function (KnownWorkflowSkuName) {
    /** NotSpecified */
    KnownWorkflowSkuName["NotSpecified"] = "NotSpecified";
    /** Free */
    KnownWorkflowSkuName["Free"] = "Free";
    /** Shared */
    KnownWorkflowSkuName["Shared"] = "Shared";
    /** Basic */
    KnownWorkflowSkuName["Basic"] = "Basic";
    /** Standard */
    KnownWorkflowSkuName["Standard"] = "Standard";
    /** Premium */
    KnownWorkflowSkuName["Premium"] = "Premium";
})(KnownWorkflowSkuName || (KnownWorkflowSkuName = {}));
/** Known values of {@link Kind} that the service accepts. */
export var KnownKind;
(function (KnownKind) {
    /** Stateful */
    KnownKind["Stateful"] = "Stateful";
    /** Stateless */
    KnownKind["Stateless"] = "Stateless";
})(KnownKind || (KnownKind = {}));
//# sourceMappingURL=index.js.map